{"ts":1360840201927,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var app = require('http').createServer(handler);\nvar fs = require('fs');\nvar io = require('socket.io').listen(app);\nvar port = process.env.PORT || 5000;\napp.listen(port);\n\n// websockets not supported yet\nio.configure(function() {\n   io.set(\"transports\", [\"xhr-polling\"]);\n   io.set(\"polling duration\", 10);\n});\n\nfunction handler(req, res) {\n   fs.readFile(__dirname + '/index.html',\n\n   function(err, data) {\n      if (err) {\n         res.writeHead(500);\n         return res.end('Error loading index.html');\n      }\n\n      res.writeHead(200);\n      res.end(data);\n   });\n}\n\n\nfunction cell(_x, _y) {\n   this.x = _x;\n   this.y = _y;\n\n   this.energy = 0;\n   this.threshold = 100;\n   this.gotGrass = false;\n   this.spreadTo = false;\n\n   this.gotRabbit = false;\n   this.rabbitEnergy = 100;\n   this.rabbitThreshold = 200;\n   this.reproduce = false;\n   this.hop = false;\n\n   this.update = update;\n\n   function update() {\n      if (this.gotRabbit) {\n         if (this.rabbitEnergy > this.rabbitThreshold) {\n            this.rabbitEnergy /= 2;\n            this.reproduce = true;\n         }\n         else {\n            this.rabbitEnergy--;\n            if (this.energy <= 25) {\n               if ((Math.floor(Math.random() * 10) % 10) == 1) {\n                  this.rabbitEnergy -= 5;\n                  this.hop = true;\n               }\n            }\n            if (this.energy > 0) {\n               this.rabbitEnergy += 5;\n               this.energy -= 2;\n            }\n         }\n         if (this.rabbitEnergy <= 0) this.gotRabbit = false;\n      }\n\n      if (this.gotGrass) {\n         if (this.energy > this.threshold) {\n            //choose random cell\n            //add to cell\n            this.energy /= 2;\n            this.spreadTo = true;\n         }\n         else {\n            this.energy++;\n         }\n         if (this.energy <= 0) {\n            this.energy = 0;\n            this.gotGrass = false;\n         }\n      }\n   }\n}\n\nvar Forest = function() {\n   this.maxTrees = 1000;\n   this.growthRate = 1;\n   this.trees = 0;\n   this.updateForest = updateForest;\n   this.setLevel = setLevel;\n   this.level = 1;\n   this.wood = 0;\n   this.deathRate = 0.001;\n   this.maxWood = 500;\n\n   function setLevel(level) {\n      this.level = level;\n      this.growthRate *= level;\n      this.maxTrees *= level;\n\n      this.maxWood *= level;\n   }\n\n   function updateForest(dt) {\n      this.trees += (this.growthRate * dt);\n\n      if (this.trees > this.maxTrees) this.trees = this.maxTrees;\n\n      this.wood += this.trees * (this.deathRate * dt);\n      this.trees -= this.deathRate * dt;\n\n      if (this.wood > this.maxWood) this.wood = this.maxWood;\n      if (this.trees < 0) this.trees = 0;\n   }\n};\n\nvar Field = function(_id) {\n   this.timeCreated = new Date();\n   this.lastUpdated = 0;\n   this.dt = 0;\n   this.id = _id;\n   this.cells = {};\n   this.numCells = 10;\n   this.grass_amt = 0;\n   this.rabbit_amt = 0;\n   this.active = false;\n};\n\nField.prototype.spreadTo = function(x, y) {\n   var newX = ((Math.floor(Math.random() * 3)) - 1);\n   var newY = ((Math.floor(Math.random() * 3)) - 1);\n   //console.log(\"multiply \" + x + \" , \" + y);\n\n   if (x + newX >= this.numCells) return;\n   if (x + newX <= 0) return;\n\n   if (y + newY >= this.numCells) return;\n   if (y + newY <= 0) return;\n\n   this.cells[x + newX][y + newY].gotGrass = true;\n   this.cells[x + newX][y + newY].energy = 100;\n};\n\nField.prototype.hop = function(x, y) {\n   var newX = (Math.floor(Math.random() * 4)) - 2;\n   var newY = (Math.floor(Math.random() * 4)) - 2;\n   //console.log(\"hop \"+newX +\" \"  + newY + \" \"+x + \" \"+y);\n   if (x + newX >= this.numCells) return;\n   if (x + newX <= 0) return;\n\n   if (y + newY >= this.numCells) return;\n   if (y + newY <= 0) return;\n\n   this.cells[x][y].gotRabbit = false;\n   this.cells[x + newX][y + newY].gotRabbit = true;\n   this.cells[x + newX][y + newY].rabbitEnergy = this.cells[x][y].rabbitEnergy;\n   this.cells[x][y].rabbitEnergy = 0;\n};\n\nField.prototype.reproduce = function(x, y) {\n   var newX = ((Math.floor(Math.random() * 3)) - 1);\n   var newY = ((Math.floor(Math.random() * 3)) - 1);\n   //console.log(\"reproduce \" +newX +\" \"  + newY + \" \"+x + \" \"+y);\n   if (x + newX >= this.numCells) return;\n   if (x + newX <= 0) return;\n\n   if (y + newY >= this.numCells) return;\n   if (y + newY <= 0) return;\n\n   this.cells[x + newX][y + newY].gotRabbit = true;\n   this.cells[x + newX][y + newY].rabbitEnergy = 50;\n};\n\n\nField.prototype.init = function(_cells) {\n   // kind of dodgy way to get reference to the cells\n   this.cells = _cells;\n\n   //   this.cells[2][2].gotGrass = true;\n   //   this.cells[2][2].energy = 100;\n   //   this.cells[2][9].gotGrass = true;\n   //   this.cells[2][9].energy = 100;\n   //   this.cells[5][5].gotGrass = true;\n   //   this.cells[5][5].energy = 100;\n   //   this.cells[6][5].gotGrass = true;\n   //   this.cells[6][5].energy = 100;\n   //   this.cells[5][4].gotGrass = true;\n   //   this.cells[5][4].energy = 100;\n   //   this.cells[4][4].gotGrass = true;\n   //   this.cells[4][4].energy = 100;\n   //\n   //   this.cells[9][2].gotGrass = true;\n   //   this.cells[9][2].energy = 100;\n   //   this.cells[9][9].gotGrass = true;\n   //   this.cells[9][9].energy = 100;\n   //\n   //   this.cells[5][5].gotRabbit = true;\n   //   this.cells[2][2].gotRabbit = true;\n   //   this.cells[9][9].gotRabbit = true;\n   //   this.cells[5][5].gotRabbit = true;\n};\n\n\nField.prototype.update = function() {\n   this.dt = new Date().getTime() - this.lastUpdated;\n   this.lastUpdated = new Date().getTime();\n   this.rabbit_amt = 0;\n   this.grass_amt = 0;\n\n   for (var i = 0; i < this.numCells; i++) {\n      for (var j = 0; j < this.numCells; j++) {\n         this.cells[i][j].update();\n\n         if (this.cells[i][j].gotRabbit) this.rabbit_amt++;\n         if (this.cells[i][j].gotGrass) this.grass_amt++;\n\n         if (this.cells[i][j].spreadTo) {\n            this.spreadTo(i, j);\n            this.cells[i][j].spreadTo = false;\n         }\n         if (this.cells[i][j].hop) {\n            this.hop(i, j);\n            this.cells[i][j].hop = false;\n         }\n\n         if (this.cells[i][j].reproduce) {\n            this.reproduce(i, j);\n            this.cells[i][j].reproduce = false;\n         }\n         if (this.active) {\n            io.sockets.emit('updateCell', i, j, this.cells[i][j].gotRabbit, this.cells[i][j].gotGrass); {}\n         }\n         var x, y = 0;\n         if (this.grass_amt <= 5) {\n            x = ((Math.floor(Math.random() * 8)));\n            y = ((Math.floor(Math.random() * 8)));\n            this.cells[x][y].gotGrass = true;\n            this.cells[x][y].energy = 100;\n         }\n         if (this.rabbit_amt <= 0) {\n            x = ((Math.floor(Math.random() * 8)));\n            y = ((Math.floor(Math.random() * 8)));\n            this.cells[x][y].gotRabbit = true;\n            this.cells[x][y].rabbitEnergy = 100;\n         }\n      }\n   }\n};\n\n\nvar fields = {};\n\nfunction createCells() {\n   var cells = {};\n   var numCells = 10;\n   for (var i = 0; i < numCells; i++) {\n      var cellsRow = {};\n      for (var j = 0; j < numCells; j++) {\n         cellsRow[j] = new cell(i, j);\n      }\n      cells[i] = cellsRow;\n   }\n   return cells;\n}\n\nfor (var i = 0; i < 50; i++) {\n   var cells = createCells();\n   createCells(cells);\n   fields[i] = new Field(i);\n   fields[i].init(cells);\n}\n\nvar count = 0;\nsetInterval(function() {\n   fields[count].active=true;\n   for (var i = 0; i < 50; i++) {\n      fields[i].update();\n      \n   }\n   fields[count].active=false;\n}, 100);\n\nvar dt = new Date().getTime();\nvar lastUpdate = dt;\n\nsetInterval(sendTime, 1000);\n\n\n\nfunction sendTime() {\n   io.sockets.emit('updateTime', new Date());\n   dt = new Date().getTime() - lastUpdate;\n   lastUpdate = new Date().getTime();\n\n   io.sockets.emit('refresh', 1);\n   count++;\n   count %= 50;\n   io.sockets.emit('fieldData', fields[count].timeCreated, fields[count].id, fields[count].dt);\n}\n\n// usernames which are currently connected to the chat\nvar usernames = {};\nio.sockets.on('connection', function(socket) {\n   // when the client emits 'adduser', this listens and executes\n   socket.on('adduser', function(username) {\n\n      // we store the username in the socket session for this client\n      socket.username = username;\n\n      // add the client's username to the global list\n      usernames[username] = username;\n\n      // echo to client they've connected\n      socket.emit('updatechat', 'SERVER', 'you have connected');\n\n      // echo globally (all clients) that a person has connected\n      socket.broadcast.emit('updatechat', 'SERVER', username + ' has connected');\n\n      // update the list of users in chat, client-side\n      io.sockets.emit('updateusers', usernames);\n\n   });\n\n   // when the user disconnects.. perform this\n   socket.on('disconnect', function() {\n      // remove the username from global usernames list\n      delete usernames[socket.username];\n\n      // update list of users in chat, client-side\n      io.sockets.emit('updateusers', usernames);\n\n      // echo globally that this client has left\n      socket.broadcast.emit('updatechat', 'SERVER', socket.username + ' has disconnected');\n   });\n});"]],"start1":0,"start2":0,"length1":0,"length2":9099}]],"length":9099}
{"contributors":[],"silentsave":false,"ts":1361009365413,"patch":[[{"diffs":[[0,"  }\n};\n\n"],[-1,"\n"],[0,"var fiel"]],"start1":6842,"start2":6842,"length1":17,"length2":16}]],"length":9098,"saved":false}
{"contributors":[],"silentsave":false,"ts":1362889469753,"patch":[[{"diffs":[[0," ' has connected"],[1," "],[0,"');\n\n      // up"]],"start1":8527,"start2":8527,"length1":32,"length2":33}]],"length":9099,"saved":false}
{"contributors":[],"silentsave":false,"ts":1370944406198,"patch":[[{"diffs":[[0,"var "],[-1,"app = require('http').createServer(handler);\nvar fs = require('fs');\nvar io = require('socket.io').listen(app);\nvar port = process.env.PORT || 5000;\napp.listen(port);\n\n// websockets not supported yet\nio.configure(function() {\n   io.set(\"transports\", [\"xhr-polling\"]);\n   io.set(\"polling duration\", 10);\n});\n\nfunction handler(req, res) {\n   fs.readFile(__dirname + '/index.html',\n\n   function(err, data) {\n      if (err) {\n         res.writeHead(500);\n         return res.end('Error loading index.html');\n      }\n\n      res.writeHead(200);\n      res.end(data);\n   });\n}\n\n\nfunction cell(_x, _y) {\n   this.x = _x;\n   this.y = _y;\n\n   this.energy = 0;\n   this.threshold = 100;\n   this.gotGrass = false;\n   this.spreadTo = false;\n\n   this.gotRabbit = false;\n   this.rabbitEnergy = 100;\n   this.rabbitThreshold = 200;\n   this.reproduce = false;\n   this.hop = false;\n\n   this.update = update;\n\n   function update() {\n      if (this.gotRabbit) {\n         if (this.rabbitEnergy > this.rabbitThreshold) {\n            this.rabbitEnergy /= 2;\n            this.reproduce = true;\n         }\n         else {\n            this.rabbitEnergy--;\n            if (this.energy <= 25) {\n               if ((Math.floor(Math.random() * 10) % 10) == 1) {\n                  this.rabbitEnergy -= 5;\n                  this.hop = true;\n               }\n            }\n            if (this.energy > 0) {\n               this.rabbitEnergy += 5;\n               this.energy -= 2;\n            }\n         }\n         if (this.rabbitEnergy <= 0) this.gotRabbit = false;\n      }\n\n      if (this.gotGrass) {\n         if (this.energy > this.threshold) {\n            //choose random cell\n            //add to cell\n            this.energy /= 2;\n            this.spreadTo = true;\n         }\n         else {\n            this.energy++;\n         }\n         if (this.energy <= 0) {\n            this.energy = 0;\n            this.gotGrass = false;\n         }\n      }\n   }\n}\n\nvar Forest = function() {\n   this.maxTrees = 1000;\n   this.growthRate = 1;\n   this.trees = 0;\n   this.updateForest = updateForest;\n   this.setLevel = setLevel;\n   this.level = 1;\n   this.wood = 0;\n   this.deathRate = 0.001;\n   this.maxWood = 500;\n\n   function setLevel(level) {\n      this.level = level;\n      this.growthRate *= level;\n      this.maxTrees *= level;\n\n      this.maxWood *= level;\n   }\n\n   function updateForest(dt) {\n      this.trees += (this.growthRate * dt);\n\n      if (this.trees > this.maxTrees) this.trees = this.maxTrees;\n\n      this.wood += this.trees * (this.deathRate * dt);\n      this.trees -= this.deathRate * dt;\n\n      if (this.wood > this.maxWood) this.wood = this.maxWood;\n      if (this.trees < 0) this.trees = 0;\n   }\n};\n\nvar Field = function(_id) {\n   this.timeCreated = new Date();\n   this.lastUpdated = 0;\n   this.dt = 0;\n   this.id = _id;\n   this.cells = {};\n   this.numCells = 10;\n   this.grass_amt = 0;\n   this.rabbit_amt = 0;\n   this.active = false;\n};\n\nField.prototype.spreadTo = function(x, y) {\n   var newX = ((Math.floor(Math.random() * 3)) - 1);\n   var newY = ((Math.floor(Math.random() * 3)) - 1);\n   //console.log(\"multiply \" + x + \" , \" + y);\n\n   if (x + newX >= this.numCells) return;\n   if (x + newX <= 0) return;\n\n   if (y + newY >= this.numCells) return;\n   if (y + newY <= 0) return;\n\n   this.cells[x + newX][y + newY].gotGrass = true;\n   this.cells[x + newX][y + newY].energy = 100;\n};\n\nField.prototype.hop = function(x, y) {\n   var newX = (Math.floor(Math.random() * 4)) - 2;\n   var newY = (Math.floor(Math.random() * 4)) - 2;\n   //console.log(\"hop \"+newX +\" \"  + newY + \" \"+x + \" \"+y);\n   if (x + newX >= this.numCells) return;\n   if (x + newX <= 0) return;\n\n   if (y + newY >= this.numCells) return;\n   if (y + newY <= 0) return;\n\n   this.cells[x][y].gotRabbit = false;\n   this.cells[x + newX][y + newY].gotRabbit = true;\n   this.cells[x + newX][y + newY].rabbitEnergy = this.cells[x][y].rabbitEnergy;\n   this.cells[x][y].rabbitEnergy = 0;\n};\n\nField.prototype.reproduce = function(x, y) {\n   var newX = ((Math.floor(Math.random() * 3)) - 1);\n   var newY = ((Math.floor(Math.random() * 3)) - 1);\n   //console.log(\"reproduce \" +newX +\" \"  + newY + \" \"+x + \" \"+y);\n   if (x + newX >= this.numCells) return;\n   if (x + newX <= 0) return;\n\n   if (y + newY >= this.numCells) return;\n   if (y + newY <= 0) return;\n\n   this.cells[x + newX][y + newY].gotRabbit = true;\n   this.cells[x + newX][y + newY].rabbitEnergy = 50;\n};\n\n\nField.prototype.init = function(_cells) {\n   // kind of dodgy way to get reference to the cells\n   this.cells = _cells;\n\n   //   this.cells[2][2].gotGrass = true;\n   //   this.cells[2][2].energy = 100;\n   //   this.cells[2][9].gotGrass = true;\n   //   this.cells[2][9].energy = 100;\n   //   this.cells[5][5].gotGrass = true;\n   //   this.cells[5][5].energy = 100;\n   //   this.cells[6][5].gotGrass = true;\n   //   this.cells[6][5].energy = 100;\n   //   this.cells[5][4].gotGrass = true;\n   //   this.cells[5][4].energy = 100;\n   //   this.cells[4][4].gotGrass = true;\n   //   this.cells[4][4].energy = 100;\n   //\n   //   this.cells[9][2].gotGrass = true;\n   //   this.cells[9][2].energy = 100;\n   //   this.cells[9][9].gotGrass = true;\n   //   this.cells[9][9].energy = 100;\n   //\n   //   this.cells[5][5].gotRabbit = true;\n   //   this.cells[2][2].gotRabbit = true;\n   //   this.cells[9][9].gotRabbit = true;\n   //   this.cells[5][5].gotRabbit = true;\n};\n\n\nField.prototype.update = function() {\n   this.dt = new Date().getTime() - this.lastUpdated;\n   this.lastUpdated = new Date().getTime();\n   this.rabbit_amt = 0;\n   this.grass_amt = 0;\n\n   for (var i = 0; i < this.numCells; i++) {\n      for (var j = 0; j < this.numCells; j++) {\n         this.cells[i][j].update();\n\n         if (this.cells[i][j].gotRabbit) this.rabbit_amt++;\n         if (this.cells[i][j].gotGrass) this.grass_amt++;\n\n         if (this.cells[i][j].spreadTo) {\n            this.spreadTo(i, j);\n            this.cells[i][j].spreadTo = false;\n         }\n         if (this.cells[i][j].hop) {\n            this.hop(i, j);\n            this.cells[i][j].hop = false;\n         }\n\n         if (this.cells[i][j].reproduce) {\n            this.reproduce(i, j);\n            this.cells[i][j].reproduce = false;\n         }\n         if (this.active) {\n            io.sockets.emit('updateCell', i, j, this.cells[i][j].gotRabbit, this.cells[i][j].gotGrass); {}\n         }\n         var x, y = 0;\n         if (this.grass_amt <= 5) {\n            x = ((Math.floor(Math.random() * 8)));\n            y = ((Math.floor(Math.random() * 8)));\n            this.cells[x][y].gotGrass = true;\n            this.cells[x][y].energy = 100;\n         }\n         if (this.rabbit_amt <= 0) {\n            x = ((Math.floor(Math.random() * 8)));\n            y = ((Math.floor(Math.random() * 8)));\n            this.cells[x][y].gotRabbit = true;\n            this.cells[x][y].rabbitEnergy = 100;\n         }\n      }\n   }\n};\n\nvar fields = {};\n\nfunction createCells() {\n   var cells = {};\n   var numCells = 10;\n   for (var i = 0; i < numCells; i++) {\n      var cellsRow = {};\n      for (var j = 0; j < numCells; j++) {\n         cellsRow[j] = new cell(i, j);\n      }\n      cells[i] = cellsRow;\n   }\n   return cells;\n}\n\nfor (var i = 0; i < 50; i++) {\n   var cells = createCells();\n   createCells(cells);\n   fields[i] = new Field(i);\n   fields[i].init(cells);\n}\n\nvar count = 0;\nsetInterval(function() {\n   fields[count].active=true;\n   for (var i = 0; i < 50; i++) {\n      fields[i].update();\n      \n   }\n   fields[count].active=false;\n}, 100);\n\nvar dt = new Date().getTime();\nvar lastUpdate = dt;\n\nsetInterval(sendTime, 1000);\n\n\n\nfunction sendTime() {\n   io.sockets.emit('updateTime', new Date());\n   dt = new Date().getTime() - lastUpdate;\n   lastUpdate = new Date().getTime();\n\n   io.sockets.emit('refresh', 1);\n   count++;\n   count %= 50;\n   io.sockets.emit('fieldData', fields[count].timeCreated, fields[count].id, fields[count].dt);\n}\n\n// usernames which are currently connected to the chat\nvar usernames = {};\nio.sockets.on('connection', function(socket) {\n   // when the client emits 'adduser', this listens and executes\n   socket.on('adduser', function(username) {\n\n      // we store the username in the socket session for this client\n      socket.username = username;\n\n      // add the client's username to the global list\n      usernames[username] = username;\n\n      // echo to client they've connected\n      socket.emit('updatechat', 'SERVER', 'you have connected');\n\n      // echo globally (all clients) that a person has connected\n      socket.broadcast.emit('updatechat', 'SERVER', username + ' has connected ');\n\n      // update the list of users in chat, client-side\n      io.sockets.emit('updateusers', usernames);\n\n   });\n\n   // when the user disconnects.. perform this\n   socket.on('disconnect', function() {\n      // remove the username from global usernames list\n      delete usernames[socket.username];\n\n      // update list of users in chat, client-side\n      io.sockets.emit('updateusers', usernames);\n\n      // echo globally that this client has left\n      socket.broadcast.emit('updatechat', 'SERVER', socket.username + ' has disconnected'"],[1,"redis = require('redis-url').connect(process.env.REDISTOGO_URL);\n\nvar express = require('express');\n\nvar app = express();\n\nvar server = require('http').createServer(app);\nvar fs = require('fs');\nvar io = require('socket.io').listen(server);\n\nvar port = process.env.PORT || 5000;\nserver.listen(port);\n\napp.use(express.static(__dirname + '/public'));\n\n// websockets not supported yet\nio.configure(function() {\n   io.set(\"transports\", [\"xhr-polling\"]);\n   io.set(\"polling duration\", 10);\n});\nfunction writeRes(res,str){\n    res.writeHead(200);\n        res.end(str);\n}\n\napp.use(function(req, res, next){\n   \n   // fs.readFile(__dirname + '/castle.html',\n   // function(err, data) {\n   //    if (err) {\n   //       res.writeHead(500);\n   //       return res.end('Error loading index.html');\n   //    }\n\n   //    res.writeHead(200);\n   //    res.end(data);\n   // });\n   \n   \n   fs.readFile(__dirname + '/shoitter/shoitter.html',\n   function(err, data) {\n      if (err) {\n         res.writeHead(500);\n         return res.end('Error loading index.html');\n      }\n\n      res.writeHead(200);\n      res.end(data"],[0,");\n "]],"start1":0,"start2":0,"length1":9090,"length2":1108}]],"length":1117,"saved":false}
{"ts":1370944419393,"patch":[[{"diffs":[[0,"   \n"],[-1,"   // fs.readFile(__dirname + '/castle.html',\n   // function(err, data) {\n   //    if (err) {\n   //       res.writeHead(500);\n   //       return res.end('Error loading index.html');\n   //    }\n\n   //    res.writeHead(200);\n   //    res.end(data);\n   // });\n   \n"],[0,"   \n"]],"start1":604,"start2":604,"length1":269,"length2":8}]],"length":856,"saved":false}
{"ts":1370945234151,"patch":[[{"diffs":[[0,";\n   });\n});"],[1,"\n\nio.sockets.on('connection', function(socket) {\nsocket.on('connect', function() {\n   socket.emit('shoitterPile', 'you have connected as');\n});\n});\n\n"]],"start1":844,"start2":844,"length1":12,"length2":161}]],"length":1005,"saved":false}
{"ts":1370946057890,"patch":[[{"diffs":[[0,"cket) {\n"],[1,"\n"],[0,"socket.o"]],"start1":897,"start2":897,"length1":16,"length2":17},{"diffs":[[0,"d as"],[-1,"'"],[1," ' + userId"],[0,");\n});\n"],[1,"\n"],[0,"});\n"]],"start1":989,"start2":989,"length1":16,"length2":27}]],"length":1017,"saved":false}
{"ts":1370946736479,"patch":[[{"diffs":[[0,"TOGO_URL);\n\n"],[1,"\n"],[0,"var express "]],"start1":58,"start2":58,"length1":24,"length2":25},{"diffs":[[0,"ion() {\n"],[1,"   \n\nredis.set('foo', 'bar');\n\nredis.get('foo', function(err, value) {\n  console.log('foo is: ' + value);\n});\n\n"],[0,"   socke"]],"start1":933,"start2":933,"length1":16,"length2":127},{"diffs":[[0,"as '"],[-1," + userId"],[0,");\n}"]],"start1":1103,"start2":1103,"length1":17,"length2":8}]],"length":1120,"saved":false}
{"ts":1370948089455,"patch":[[{"diffs":[[0,") {\n"],[-1,"  console.log('foo is: ' + value);\n});\n\n "],[0,"  so"]],"start1":1008,"start2":1008,"length1":49,"length2":8},{"diffs":[[0,"ted as '"],[-1,");"],[1," + value);\n});\n\n   "],[0,"\n});\n\n})"]],"start1":1058,"start2":1058,"length1":18,"length2":35}]],"length":1096,"saved":false}
{"ts":1370948348336,"patch":[[{"diffs":[[0,"get('foo"],[1,"1"],[0,"', funct"]],"start1":978,"start2":978,"length1":16,"length2":17}]],"length":1097,"saved":false}
{"ts":1370948541898,"patch":[[{"diffs":[[0,"alue) {\n"],[1,"   if (value == null){\n      value = \" user doesn't exist\"\n   }\n   else{\n     // socket.emit('shoitterPile', 'you have connected as ' + value);\n   }\n "],[0,"  socket"]],"start1":1005,"start2":1005,"length1":16,"length2":166}]],"length":1247,"saved":false}
{"ts":1371034383781,"patch":[[{"diffs":[[0,"   \n"],[-1,"\n"],[0,"redis."],[-1,"set('foo', 'bar"],[1,"incr('userID"],[0,"');\n\n"],[1,"\n"],[0,"redi"]],"start1":941,"start2":941,"length1":35,"length2":32},{"diffs":[[0,"et('"],[-1,"foo1"],[1,"userID"],[0,"', f"]],"start1":976,"start2":976,"length1":12,"length2":14}]],"length":1246,"saved":false}
{"ts":1371035262279,"patch":[[{"diffs":[[0,"ket.on('"],[-1,"connect"],[1,"logon"],[0,"', funct"]],"start1":910,"start2":910,"length1":23,"length2":21},{"diffs":[[0,"ion("],[1,"userName"],[0,")"],[-1," "],[0,"{\n   \n"],[1,"   "],[0,"redis."],[-1,"incr"],[1,"get"],[0,"('user"],[-1,"ID');\n\n\nredis.get('userID', "],[1,"name:'+userName+':id' ,"],[0,"func"]],"start1":931,"start2":931,"length1":60,"length2":64},{"diffs":[[0,"r, value) {\n"],[1,"    "],[0,"   if (value"]],"start1":1002,"start2":1002,"length1":24,"length2":28},{"diffs":[[0,"value =="],[1,"="],[0," null){\n"]],"start1":1025,"start2":1025,"length1":16,"length2":17},{"diffs":[[0,"{\n      "],[1,"   "],[1," "],[0,"value = "]],"start1":1040,"start2":1040,"length1":16,"length2":20},{"diffs":[[0,"ist\""],[1,";"],[0,"\n   "],[-1,"}\n"],[0,"   "],[-1,"else{"],[1," }"],[0,"\n     "],[-1,"//"],[1," "],[0," soc"]],"start1":1077,"start2":1077,"length1":30,"length2":25},{"diffs":[[0,"   }"],[-1,"\n   socket.emit('shoitterPile', 'you have connected as ' + value);\n});\n\n   "],[1,");\n});\n\nsocket.on('connect', function() {\n"],[0,"\n});"]],"start1":1162,"start2":1162,"length1":83,"length2":50}]],"length":1219,"saved":false}
{"ts":1371035485741,"patch":[[{"diffs":[[0,".on('log"],[-1,"o"],[1,"i"],[0,"n', func"]],"start1":913,"start2":913,"length1":17,"length2":17}]],"length":1219,"saved":false}
{"ts":1371035501663,"patch":[[{"diffs":[[0,"= \" user"],[1," \"+userName+\""],[0," doesn't"]],"start1":1058,"start2":1058,"length1":16,"length2":29}]],"length":1232,"saved":false}
{"ts":1371036185802,"patch":[[{"diffs":[[0,"    "],[-1,"value = \" user \"+userName+\" doesn't exist\";"],[1,"redis.incr(\"global:nextUserId\",function(err, userId)){\n             value = \" user \"+userName+\" doesn't exist new user created \"+userId;\n             redis.set(\"uid:\"+userId+\":username\");\n          }\n          "],[0,"\n   "]],"start1":1048,"start2":1048,"length1":51,"length2":218},{"diffs":[[0,"ion() {\n"],[1,"       "],[0,"\n});\n\n})"]],"start1":1380,"start2":1380,"length1":16,"length2":23}]],"length":1406,"saved":false}
{"ts":1371036444713,"patch":[[{"diffs":[[0," userId)"],[-1,")"],[0,"{\n      "]],"start1":1096,"start2":1096,"length1":17,"length2":16},{"diffs":[[0,"e\");\n          }"],[1,");"],[0,"\n          \n    "]],"start1":1234,"start2":1234,"length1":32,"length2":34}]],"length":1407,"saved":false}
{"ts":1371037016070,"patch":[[{"diffs":[[0,"value =="],[-1,"="],[0," null){\n"]],"start1":1025,"start2":1025,"length1":17,"length2":16}]],"length":1406,"saved":false}
{"ts":1371037968660,"patch":[[{"diffs":[[0,"sername\""],[1,",userName);\n             redis.set('username:'+userName+'e:uid',userId"],[0,");\n     "]],"start1":1227,"start2":1227,"length1":16,"length2":86},{"diffs":[[0,"e', "],[-1,"'you have connected as '"],[0," + v"]],"start1":1373,"start2":1373,"length1":32,"length2":8}]],"length":1452,"saved":false}
{"ts":1371038258602,"patch":[[{"diffs":[[0," == null"],[1," "],[0,"){\n     "]],"start1":1030,"start2":1030,"length1":16,"length2":17},{"diffs":[[0,"erName+'"],[-1,"e"],[0,":uid',us"]],"start1":1285,"start2":1285,"length1":17,"length2":16}]],"length":1452,"saved":false}
{"ts":1371038523089,"patch":[[{"diffs":[[0,"){\n         "],[1,"//"],[0," redis.incr("]],"start1":1039,"start2":1039,"length1":24,"length2":26},{"diffs":[[0,"reated \""],[1,";//"],[0,"+userId;"]],"start1":1173,"start2":1173,"length1":16,"length2":19},{"diffs":[[0,"serId;\n         "],[1,"//"],[0,"    redis.set(\"u"]],"start1":1186,"start2":1186,"length1":32,"length2":34},{"diffs":[[0,");\n         "],[1,"//"],[0,"    redis.se"]],"start1":1252,"start2":1252,"length1":24,"length2":26}]],"length":1461,"saved":false}
{"ts":1371038537022,"patch":[[{"diffs":[[0,"        "],[1,"//"],[0," });\n   "]],"start1":1318,"start2":1318,"length1":16,"length2":18}]],"length":1463,"saved":false}
{"ts":1371038803284,"patch":[[{"diffs":[[0,"le',"],[-1,"  +"],[0," val"]],"start1":1383,"start2":1383,"length1":11,"length2":8}]],"length":1460,"saved":false}
{"contributors":[],"silentsave":false,"ts":1371269511709,"patch":[[{"diffs":[[0,"0);\n});\n"],[1,"\n"],[0,"function"]],"start1":486,"start2":486,"length1":16,"length2":17},{"diffs":[[0,"res,"],[1," "],[0,"str)"],[1," "],[0,"{\n"],[-1," "],[0,"   r"]],"start1":513,"start2":513,"length1":15,"length2":16},{"diffs":[[0,"d(200);\n"],[-1,"     "],[0,"   res.e"]],"start1":540,"start2":540,"length1":21,"length2":16},{"diffs":[[0,"s, next)"],[1," "],[0,"{\n"],[-1,"   \n   "],[1,"\n"],[0,"\n   fs.r"]],"start1":592,"start2":592,"length1":25,"length2":20},{"diffs":[[0,".html',\n"],[1,"\n"],[0,"   funct"]],"start1":651,"start2":651,"length1":16,"length2":17},{"diffs":[[0,");\n\n"],[-1,"io.sockets.on('connection', function(socket) {\n\nsocket.on('login', function(userName){\n   \n   redis.get('username:'+userName+':id' ,function(err, value) {\n       if (value == null ){\n         // redis.incr(\"global:nextUserId\",function(err, userId){\n             value = \" user \"+userName+\" doesn't exist new user created \";//+userId;\n         //    redis.set(\"uid:\"+userId+\":username\",userName);\n         //    redis.set('username:'+userName+':uid',userId);\n         // });\n          \n       }\n       socket.emit('shoitterPile', value);\n   });\n});\n\nsocket.on('connect', function() {\n       \n});\n\n});\n"],[1,"function getPost(socket, postId) {\n   var post_id = \"post:\" + postId;\n   redis.get(post_id, function(err, post) {\n      if (post !== null) {\n         // found the post send it to the client\n         redis.ttl(post_id, function(err, ttl) {\n            socket.emit('shoitterPile', post_id + \" \");\n            socket.emit('shoitterPile', \"TTL \" + ttl);\n            socket.emit('shoitterPile', post + \"<br>\");\n         });\n      }\n      else {\n         socket.emit('shoitterPile', \"Deleting \" + postId + \"<br>\");\n         // get post failed, post must be dead remove it from list\n         redis.lrem(\"global:shoitterPile\", 0,  postId);\n      }\n   });\n};\n\nfunction showShoitterList(socket) {\n   // get all the post from the shoitterPile\n   redis.lrange(\"global:shoitterPile\", 0, - 1, function(err, posts) {\n      if( posts!=null){\n      for (var i =0; i<posts.length; ) {\n         // get the post\n         socket.emit('shoitterPile', \"ID - \" + posts[i] + \"<br>\");\n         getPost(socket, posts[i]);\n\n      }\n      }\n\n   });\n};\n\nio.sockets.on('connection', function(socket) {\n   socket.on('showAllMessages', function() {\n      showShoitterList(socket);\n   });\n\n   socket.on('login', function(userName, message) {\n      var i = 0;\n\n      //userName = Math.random().toString(36).substring(7);\n\n      redis.get('username:' + userName + ':uid', function(err, uid) {\n         if (uid == null) {\n            // user not found so create new user\n            redis.incr(\"global:nextUserId\", function(err, userId) {\n               id = \" user \" + userName + \" doesn't exist new user created \" + userId;\n               //save the user keys\n               redis.set(\"uid:\" + userId + \":username\", userName);\n               redis.set('username:' + userName + ':uid', userId);\n               socket.emit('shoitterPile', uid);\n            });\n\n         }\n         else {\n            socket.emit('shoitterPile', \"user \" + uid);\n            // increment post id\n            redis.incr(\"global:nextPostId\", function(err, postID) {\n               var post_id = \"post:\" + postID;\n               //create the post\n               redis.set( post_id, uid + \"|\" + new Date() + \"|\" + message);\n               // expire the post in 60 seconds\n               redis.expire(post_id, 60);\n               //add the post to the shoiter pile\n               redis.lpush(\"global:shoitterPile\", postID);\n               // constrain the shoitter pile to 1000 posts\n               redis.ltrim(\"global:shoitterPile\", 0, 1000);\n               // send the shoitter pile to the client\n               showShoitterList(socket);\n\n            });\n         }\n      });\n\n   });\n\n   socket.on('resetDB', function() {\n      redis.flushdb();\n   });\n\n   socket.on('connect', function() {\n      redis.get(\"global:nextUserId\", function(err, value) {\n         socket.emit(\"sysInfo\", 'number of users', value);\n      });\n      redis.get(\"global:nextPostId\", function(err, value) {\n         socket.emit(\"sysInfo\", 'number of posts', value);\n      });\n\n      redis.llen(\"global:shoitterPile\", function(err, value) {\n         socket.emit(\"sysInfo\", 'size of shoiter pile ', value);\n      });\n   });\n\n});"],[0,"\n"]],"start1":848,"start2":848,"length1":605,"length2":3145}]],"length":3993,"saved":false}
{"ts":1371269517425,"patch":[[{"diffs":[[0,"   });\n}"],[-1,";"],[0,"\n\nfuncti"]],"start1":1492,"start2":1492,"length1":17,"length2":16}]],"length":3992,"saved":false}
{"ts":1371269526033,"patch":[[{"diffs":[[0," posts!="],[1,"="],[0,"null){\n "]],"start1":1662,"start2":1662,"length1":16,"length2":17}]],"length":3993,"saved":false}
