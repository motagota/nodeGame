{"ts":1360484329275,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<<<<<<< HEAD\n\nvar app = require('http').createServer(handler);\nvar fs = require('fs');\nvar io = require('socket.io').listen(app);\nvar port = process.env.PORT || 5000;\napp.listen(port);\n\n// websockets not supported yet\nio.configure(function () {\n   io.set(\"transports\", [\"xhr-polling\"]); \n   io.set(\"polling duration\", 10); \n=======\nvar app = require('http').createServer(handler);\n\nvar fs = require('fs');\nvar io = require('socket.io').listen(app);\n\nvar port = process.env.PORT || 5000;\n\tapp.listen(port);\n\n\n//var world = require(\"./world.js\");\n\n\n// websockets not supported yet\nio.configure(function () { \n io.set(\"transports\", [\"xhr-polling\"]); \n  io.set(\"polling duration\", 10); \n>>>>>>> 92673ac4748412291170feb19e54329eb6be317b\n});\n\nfunction handler (req, res) {\n  fs.readFile(__dirname + '/index.html',\n  function (err, data) {\n<<<<<<< HEAD\n     if (err) {\n=======\n    if (err) {\n>>>>>>> 92673ac4748412291170feb19e54329eb6be317b\n      res.writeHead(500);\n      return res.end('Error loading index.html');\n    }\n\n    res.writeHead(200);\n    res.end(data);\n  });\n}\n\n<<<<<<< HEAD\nfunction cell(_x,_y){ \n  this.x=_x;\n  this.y=_y;\n\n  this.energy =0;\n  this.threshold = 100;\n  this.gotGrass = false;\n  this.spreadTo =false;\n\n\n  this.gotRabbit=false;\n  this.rabbitEnergy=100;\n  this.rabbitThreshold =200;\n  this.reporduce=false;\n  this.hop=false\n\n    \n  this.update = update;\n  function update(){\n     if(this.gotRabbit){\n        if(this.rabbitEnergy>this.rabbitThreshold){\n           this.rabbitEnergy /=2;\n           reproduce=true;\n        }\n        else{\n           this.rabbitEnergy--;\n           if(this.energy<=25) {\n              if(( Math.floor(Math.random()*10 ) % 10) ==1){\n                 this.rabbitEnergy -= 5;\n                  hop=true;\n              }\n           }\n           if(this.energy >0)\n           {\n             this.rabbitEnergy+=5;\n             this.energy -=2;\n           }\n        }\n       if(this.rabbitEnergy<=0) this.gotRabbit=false;\n      }\n    \n     if(this.gotGrass){\n        if (this.energy > this.threshold) {\n\t   //choose random cell\n           //add to cell\n           this.energy /=2;\n           this.spreadTo=true;\n         \n       }       \n       else{\n          this.energy++;\n        }\n        if(this.energy<=0) {this.energy=0; this.gotGrass=false;}\n     }\n  }\n}\n\nvar Forest = function(){\n=======\n\nfunction Forest(){\n>>>>>>> 92673ac4748412291170feb19e54329eb6be317b\n   this.maxTrees = 1000;\n   this.growthRate = 1;\n   this.trees =0;\n   this.updateForest = updateForest;\n   this.setLevel =setLevel;\n   this.level =1;\n   this.wood =0;\n   this.deathRate=0.001;\n   this.maxWood=500;\n   \n   function setLevel(level){\n       this.level =level;\n       this.growthRate *=level;\n       this.maxTrees *= level;\n       \n       this.maxWood *=level;\n   }\n\n   function updateForest(dt){\n      this.trees +=  (this.growthRate *dt);\n\n      if(this.trees > this.maxTrees) this.trees = this.maxTrees;\n\n      this.wood += this.trees * (this.deathRate* dt);\n      this.trees -= this.deathRate*dt;\n\n      if(this.wood > this.maxWood) this.wood = this.maxWood;\n      if(this.trees<0) this.trees=0;\n   }  \n}\n\n<<<<<<< HEAD\nvar Field = function(){\n   this.cells = {};\n   this.numCells = 10;\n};\n\n\nField.prototype.speadTo = function(x,y){  \n  var newX=((Math.floor(Math.random() * 3))-1);\n  var newY=((Math.floor(Math.random() * 3))-1);\n  console.log(\"multiply \" + x + \" , \" + y  );\n  \n   if(x+newX >= this.numCells) return;\n   if(x+newX <= 0) return;\n   \n   if(y+newY >= this.numCells) return;\n   if(y+newY <= 0) return;\n                               \n   this.cells[x+newX][y+newY].gotGrass=true;\n   this.cells[x+newX][y+newY].energy=35;\n};\n/*\nfunction hop(x,y){\n   var newX=(Math.floor(Math.random() * 4))-2;\n   var newY=(Math.floor(Math.random() * 4))-2;\n//console.log(newX +\" \"  + newY + \" \"+x + \" \"+y);\n   if(x+newX >= numCells) return;\n   if(x+newX <= 0) return;\n   \n   if(y+newY >= numCells) return;\n   if(y+newY <=0) return;\n\n   this.cells[x][y].gotRabbit = false;\n   this.cells[x+newX][y+newY].gotRabbit=true;\n}\n\nfunction reproduce(x,y){\n  newX=((Math.floor(Math.random() * 3))-1)\n  newY=((Math.floor(Math.random() * 3))-1)\n\n  if(x+newX >=numCells) return;\n  if(x+newX <= 0) return;\n   \n   if(y+newY >= numCells) return;\n   if(y+newY <=0) return;\n\n   this.cells[x+newX][y+newY].gotRabbit=true;\n   this.cells[x+newX][y+newY].rabbitEnergy=50;\n}\n\n*/\n\nField.prototype.init = function(_cells) {\n   this.cells=_cells;\n   this.cells[2][2].gotGrass =  true;\n   this.cells[2][2].energy = 100;\n   this.cells[2][9].gotGrass  = true;\n   this.cells[2][9].energy = 100;\n   this.cells[5][5].gotGrass  = true;\n   this.cells[5][5].energy = 100;\n   this.cells[6][5].gotGrass  = true;\n   this.cells[6][5].energy = 100;\n   this.cells[5][4].gotGrass  = true;\n   this.cells[5][4].energy = 100;\n   this.cells[4][4].gotGrass  = true;\n   this.cells[4][4].energy = 100;\n\n   this.cells[9][2].gotGrass  = true;\n   this.cells[9][2].energy = 100;\n   this.cells[9][9].gotGrass  = true;\n   this.cells[9][9].energy = 100;\n\n   this.cells[5][5].gotRabbit = true;\n   this.cells[2][2].gotRabbit = true;\n   this.cells[9][9].gotRabbit = true;\n   this.cells[5][5].gotRabbit = true;\n};\n\n\n\nField.prototype.update = function(){    \n   for (var i=0;i<this.numCells;i++){\n      for(var j=0;j<this.numCells;j++){\n         this.cells[i][j].update();\n         if(this.cells[i][j].spreadtTo){ \n            console.log(\"tye spread\");\n            this.spreadTo(i,j);\n            this.cells[i][j].spreadTo=false;\n         }\n      }\n   }\n};\n\nvar cells={};\nvar numCells=10;\n\nfor (var i=0;i<numCells;i++){\n       var cellsRow = {};\n       for (var j=0;j<numCells;j++){\n         cellsRow[j] = new cell(i,j);\n       }\n   cells[i]= cellsRow;\n}\n\nvar fields =  new Field();\nfields.init(cells);\nsetInterval(function(){ fields.update(); }, 100 );\t\n\nvar dt=new Date().getTime();\nvar lastUpdate = dt;\n\n=======\nvar f1 = {};\nfor(i=0; i<10;i++){  f1[i] = new Forest(); f1[i].setLevel(i);}\nvar dt=new Date().getTime();\nvar lastUpdate = dt;\nvar count=0\n>>>>>>> 92673ac4748412291170feb19e54329eb6be317b\nsetInterval(sendTime, 1000);\nfunction sendTime(){\n   io.sockets.emit('updateTime', new Date());\n   dt = new Date().getTime()-lastUpdate;\n   lastUpdate = new Date().getTime();\n<<<<<<< HEAD\n    \n   io.sockets.emit('refresh',1);\n   io.sockets.emit('cells',fields.cells);\n=======\n   for( i=0;i<10;i++) f1[i].updateForest(dt/1000);\n   count++;\n   count = count %10;\n   io.sockets.emit('updateForest', count, f1[count]);\n>>>>>>> 92673ac4748412291170feb19e54329eb6be317b\n   \n}\n\n// usernames which are currently connected to the chat\nvar usernames = {};\n\nio.sockets.on('connection', function (socket) {\n<<<<<<< HEAD\n   // when the client emits 'adduser', this listens and executes\n   \n   socket.on('adduser', function(username){\n   \n   // we store the username in the socket session for this client\n=======\n\n   socket.on('updateForest',function(index){\nio.sockets.emit('updateForest', index, f1[index]);\n});\n\n   // when the client emits 'sendchat', this listens and executes\n   socket.on('sendchat', function (data) {\n\n   // we tell the client to execute 'updatechat' ith 2 parameters\n   io.sockets.emit('updatechat', socket.username, data);\n});\n\n   // when the client emits 'adduser', this listens and executes\nsocket.on('adduser', function(username){\n   // we store the username in the socket session for this client\n\n>>>>>>> 92673ac4748412291170feb19e54329eb6be317b\n   socket.username = username;\n\n   // add the client's username to the global list\n   usernames[username] = username;\n\n  // echo to client they've connected\n   socket.emit('updatechat', 'SERVER', 'you have connected');\n\n   // echo globally (all clients) that a person has connected\n   socket.broadcast.emit('updatechat', 'SERVER', username + ' has connected');\n   \n // update the list of users in chat, client-side\n   io.sockets.emit('updateusers', usernames);\n\n});\n\n\n\n// when the user disconnects.. perform this\n\nsocket.on('disconnect', function(){\n\n   // remove the username from global usernames list\n<<<<<<< HEAD\n  delete usernames[socket.username];\n\n   // update list of users in chat, client-side\n   io.sockets.emit('updateusers', usernames);\n\n   // echo globally that this client has left\n=======\n\n  delete usernames[socket.username];\n\n   // update list of users in chat, client-side\n\n   io.sockets.emit('updateusers', usernames);\n\n   // echo globally that this client has left\n\n>>>>>>> 92673ac4748412291170feb19e54329eb6be317b\n   socket.broadcast.emit('updatechat', 'SERVER', socket.username + ' has disconnected');\n\n});\n\n});\n\n"]],"start1":0,"start2":0,"length1":0,"length2":8558}]],"length":8558}
{"contributors":[],"silentsave":false,"ts":1360484562808,"patch":[[{"diffs":[[-1,"<<<<<<< HEAD\n\n"],[0,"var "]],"start1":0,"start2":0,"length1":18,"length2":4},{"diffs":[[0,"); \n"],[-1,"=======\nvar app = require('http').createServer(handler);\n\nvar fs = require('fs');\nvar io = require('socket.io').listen(app);\n\nvar port = process.env.PORT || 5000;\n\tapp.listen(port);\n\n\n//var world = require(\"./world.js\");\n\n\n// websockets not supported yet\nio.configure(function () { \n io.set(\"transports\", [\"xhr-polling\"]); \n  io.set(\"polling duration\", 10); \n>>>>>>> 92673ac4748412291170feb19e54329eb6be317b\n"],[0,"});\n"]],"start1":306,"start2":306,"length1":416,"length2":8},{"diffs":[[0,"data) {\n"],[-1,"<<<<<<< HEAD\n"],[0,"     if "]],"start1":403,"start2":403,"length1":29,"length2":16},{"diffs":[[0,") {\n"],[-1,"=======\n    if (err) {\n>>>>>>> 92673ac4748412291170feb19e54329eb6be317b\n"],[0,"    "]],"start1":423,"start2":423,"length1":80,"length2":8},{"diffs":[[0," });\n}\n\n"],[-1,"<<<<<<< HEAD\n"],[0,"function"]],"start1":554,"start2":554,"length1":29,"length2":16},{"diffs":[[0,"\n}\n\n"],[-1,"var Forest = function(){\n=======\n\nfunction Forest(){\n>>>>>>> 92673ac4748412291170feb19e54329eb6be317b"],[1,"function Forest(){"],[0,"\n   "]],"start1":1785,"start2":1785,"length1":109,"length2":26},{"diffs":[[0," }  \n}\n\n"],[-1,"<<<<<<< HEAD\n"],[0,"var Fiel"]],"start1":2521,"start2":2521,"length1":29,"length2":16},{"diffs":[[0," = dt;\n\n"],[-1,"=======\n"],[0,"var f1 ="]],"start1":5243,"start2":5243,"length1":24,"length2":16},{"diffs":[[0,"t=0\n"],[-1,">>>>>>> 92673ac4748412291170feb19e54329eb6be317b"],[0,""],[1,""],[0,"\nset"]],"start1":5385,"start2":5385,"length1":56,"length2":8},{"diffs":[[0,"Time();\n"],[-1,"<<<<<<< HEAD\n"],[0,"    \n   "]],"start1":5557,"start2":5557,"length1":29,"length2":16},{"diffs":[[0,"cells);\n"],[-1,"======="],[0,""],[1,""],[0,"\n   for("]],"start1":5637,"start2":5637,"length1":23,"length2":16},{"diffs":[[0,"]);\n"],[-1,">>>>>>> 92673ac4748412291170feb19e54329eb6be317b\n"],[0,"   \n"]],"start1":5781,"start2":5781,"length1":57,"length2":8},{"diffs":[[0,") {\n"],[-1,"<<<<<<< HEAD\n   "],[0,""],[1,""],[0,"// w"]],"start1":5912,"start2":5912,"length1":24,"length2":8},{"diffs":[[0," client\n"],[-1,"=======\n\n"],[0,"   socke"]],"start1":6088,"start2":6088,"length1":25,"length2":16},{"diffs":[[0,"ient"],[-1,"\n\n>>>>>>> 92673ac4748412291170feb19e54329eb6be317b"],[0,"\n   "]],"start1":6602,"start2":6602,"length1":58,"length2":8},{"diffs":[[0,"ist\n"],[-1,"<<<<<<< HEAD\n"],[0,"  de"]],"start1":7207,"start2":7207,"length1":21,"length2":8},{"diffs":[[0,"eft\n"],[-1,"=======\n\n  delete usernames[socket.username];\n\n   // update list of users in chat, client-side\n\n   io.sockets.emit('updateusers', usernames);\n\n   // echo globally that this client has left\n\n>>>>>>> 92673ac4748412291170feb19e54329eb6be317b"],[1,"\n\n   // echo globally that this client has left\n"],[0,"\n   "]],"start1":7386,"start2":7386,"length1":246,"length2":56}]],"length":7539,"saved":false}
{"ts":1360484713126,"patch":[[{"diffs":[[0,"var "],[-1,"io = require('socket.io').listen(app);\nvar port = process.env.PORT || 5000;\napp.listen(port);\n\n// websockets not supported yet\nio.configure(function () {\n   io.set(\"transports\", [\"xhr-polling\"]); \n   io.set(\"polling duration\", 10); \n});\n\nfunction handler (req, res) {\n  fs.readFile(__dirname + '/index.html',\n  function (err, data) {\n     if (err) {\n      res.writeHead(500);\n      return res.end('Error loading index.html');\n    }\n\n    res.writeHead(200);\n    res.end(data);\n  });\n}\n\nfunction cell(_x,_y){ \n  this.x=_x;\n  this.y=_y;\n\n  this.energy =0;\n  this.threshold = 100;\n  this.gotGrass = false;\n  this.spreadTo =false;\n\n\n  this.gotRabbit=false;\n  this.rabbitEnergy=100;\n  this.rabbitThreshold =200;\n  this.reporduce=false;\n  this.hop=false\n\n    \n  this.update = update;\n  function update(){\n     if(this.gotRabbit){\n        if(this.rabbitEnergy>this.rabbitThreshold){\n           this.rabbitEnergy /=2;\n           reproduce=true;\n        }\n        else{\n           this.rabbitEnergy--;\n           if(this.energy<=25) {\n              if(( Math.floor(Math.random()*10 ) % 10) ==1){\n                 this.rabbitEnergy -= 5;\n                  hop=true;\n              }\n           }\n           if(this.energy >0)\n           {\n             this.rabbitEnergy+=5;\n             this.energy -=2;\n           }\n        }\n       if(this.rabbitEnergy<=0) this.gotRabbit=false;\n      }\n    \n     if(this.gotGrass){\n        if (this.energy > this.threshold) {\n\t   //choose random cell\n           //add to cell\n           this.energy /=2;\n           this.spreadTo=true;\n         \n       }       \n       else{\n          this.energy++;\n        }\n        if(this.energy<=0) {this.energy=0; this.gotGrass=false;}\n     }\n  }\n}\n\nfunction Forest(){\n   this.maxTrees = 1000;\n   this.growthRate = 1;\n   this.trees =0;\n   this.updateForest = updateForest;\n   this.setLevel =setLevel;\n   this.level =1;\n   this.wood =0;\n   this.deathRate=0.001;\n   this.maxWood=500;\n   \n   function setLevel(level){\n       this.level =level;\n       this.growthRate *=level;\n       this.maxTrees *= level;\n       \n       this.maxWood *=level;\n   }\n\n   function updateForest(dt){\n      this.trees +=  (this.growthRate *dt);\n\n      if(this.trees > this.maxTrees) this.trees = this.maxTrees;\n\n      this.wood += this.trees * (this.deathRate* dt);\n      this.trees -= this.deathRate*dt;\n\n      if(this.wood > this.maxWood) this.wood = this.maxWood;\n      if(this.trees<0) this.trees=0;\n   }  \n}\n\nvar Field = function(){\n   this.cells = {};\n   this.numCells = 10;\n};\n\n\nField.prototype.speadTo = function(x,y){  \n  var newX=((Math.floor(Math.random() * 3))-1);\n  var newY=((Math.floor(Math.random() * 3))-1);\n  console.log(\"multiply \" + x + \" , \" + y  );\n  \n   if(x+newX >= this.numCells) return;\n   if(x+newX <= 0) return;\n   \n   if(y+newY >= this.numCells) return;\n   if(y+newY <= 0) return;\n                               \n   this.cells[x+newX][y+newY].gotGrass=true;\n   this.cells[x+newX][y+newY].energy=35;\n};\n/*\nfunction hop(x,y){\n   var newX=(Math.floor(Math.random() * 4))-2;\n   var newY=(Math.floor(Math.random() * 4))-2;\n//console.log(newX +\" \"  + newY + \" \"+x + \" \"+y);\n   if(x+newX >= numCells) return;\n   if(x+newX <= 0) return;\n   \n   if(y+newY >= numCells) return;\n   if(y+newY <=0) return;\n\n   this.cells[x][y].gotRabbit = false;\n   this.cells[x+newX][y+newY].gotRabbit=true;\n}\n\nfunction reproduce(x,y){\n  newX=((Math.floor(Math.random() * 3))-1)\n  newY=((Math.floor(Math.random() * 3))-1)\n\n  if(x+newX >=numCells) return;\n  if(x+newX <= 0) return;\n   \n   if(y+newY >= numCells) return;\n   if(y+newY <=0) return;\n\n   this.cells[x+newX][y+newY].gotRabbit=true;\n   this.cells[x+newX][y+newY].rabbitEnergy=50;\n}\n\n*/\n\nField.prototype.init = function(_cells) {\n   this.cells=_cells;\n   this.cells[2][2].gotGrass =  true;\n   this.cells[2][2].energy = 100;\n   this.cells[2][9].gotGrass  = true;\n   this.cells[2][9].energy = 100;\n   this.cells[5][5].gotGrass  = true;\n   this.cells[5][5].energy = 100;\n   this.cells[6][5].gotGrass  = true;\n   this.cells[6][5].energy = 100;\n   this.cells[5][4].gotGrass  = true;\n   this.cells[5][4].energy = 100;\n   this.cells[4][4].gotGrass  = true;\n   this.cells[4][4].energy = 100;\n\n   this.cells[9][2].gotGrass  = true;\n   this.cells[9][2].energy = 100;\n   this.cells[9][9].gotGrass  = true;\n   this.cells[9][9].energy = 100;\n\n   this.cells[5][5].gotRabbit = true;\n   this.cells[2][2].gotRabbit = true;\n   this.cells[9][9].gotRabbit = true;\n   this.cells[5][5].gotRabbit = true;\n};\n\n\n\nField.prototype.update = function(){    \n   for (var i=0;i<this.numCells;i++){\n      for(var j=0;j<this.numCells;j++){\n         this.cells[i][j].update();\n         if(this.cells[i][j].spreadtTo){ \n            console.log(\"tye spread\");\n            this.spreadTo(i,j);\n            this.cells[i][j].spreadTo=false;\n         }\n      }\n   }\n};\n\nvar cells={};\nvar numCells=10;\n\nfor (var i=0;i<numCells;i++){\n       var cellsRow = {};\n       for (var j=0;j<numCells;j++){\n         cellsRow[j] = new cell(i,j);\n       }\n   cells[i]= cellsRow;\n}\n\nvar fields =  new Field();\nfields.init(cells);\nsetInterval(function(){ fields.update(); }, 100 );\t\n\nvar dt=new Date().getTime();\nvar lastUpdate = dt;\n\nvar f1 = {};\nfor(i=0; i<10;i++){  f1[i] = new Forest(); f1[i].setLevel(i);}\nvar dt=new Date().getTime();\nvar lastUpdate = dt;\nvar count=0\n\nsetInterval(sendTime, 1000);\nfunction sendTime(){\n   io.sockets.emit('updateTime', new Date());\n   dt = new Date().getTime()-lastUpdate;\n   lastUpdate = new Date().getTime();\n    \n   io.sockets.emit('refresh',1);\n   io.sockets.emit('cells',fields.cells);\n\n   for( i=0;i<10;i++) f1[i].updateForest(dt/1000);\n   count++;\n   count = count %10;\n   io.sockets.emit('updateForest', count, f1[count]);\n   \n}\n\n// usernames which are currently connected to the chat\nvar usernames = {};\n\nio.sockets.on('connection', function (socket) {\n// when the client emits 'adduser', this listens and executes\n   \n   socket.on('adduser', function(username){\n   \n   // we store the username in the socket session for this client\n   socket.on('updateForest',function(index){\nio.sockets.emit('updateForest', index, f1[index]);\n});\n\n   // when the client emits 'sendchat', this listens and executes\n   socket.on('sendchat', function (data) {\n\n   // we tell the client to execute 'updatechat' ith 2 parameters\n   io.sockets.emit('updatechat', socket.username, data);\n});\n\n   // when the client emits 'adduser', this listens and executes\nsocket.on('adduser', function(username){\n   // we store the username in the socket session for this client\n   socket.username = username;\n\n   // add the client's username to the global list\n   usernames[username] = username;\n\n  // echo to client they've connected\n   socket.emit('updatechat', 'SERVER', 'you have connected');\n\n   // echo globally (all clients) that a person has connected\n   socket.broadcast.emit('updatechat', 'SERVER', username + ' has connected');\n   \n // update the list of users in chat, client-side\n   io.sockets.emit('updateusers', usernames);\n\n});\n\n\n\n// when the user disconnects.. perform this\n\nsocket.on('disconnect', function(){\n\n   // remove the username from global usernames list\n  delete usernames[socket.username];\n\n   // update list of users in chat, client-side\n   io.sockets.emit('updateusers', usernames);\n\n   // echo globally that this client has left\n\n\n   // echo globally that this client has left\n\n   socket.broadcast.emit('updatechat', 'SERVER', socket.username + ' has disconnected');\n\n});\n\n});\n"],[1,"port = process.env.PORT || 5000;\napp.listen(port);\n\nfunction handler(req, res) {\n   fs.readFile(__dirname + '/index.html',\n\n   function(err, data) {\n      if (err) {\n         res.writeHead(500);\n         return res.end('Error loading index.html');\n      }\n\n      res.writeHead(200);\n      res.end(data);\n   });\n}"],[0,"\n"]],"start1":73,"start2":73,"length1":7466,"length2":317}]],"length":390,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360490420242,"patch":[[{"diffs":[[0,"('fs');\n"],[1,"var io = require('socket.io').listen(app);\n"],[0,"var port"]],"start1":65,"start2":65,"length1":16,"length2":59},{"diffs":[[0,"port);\n\n"],[1,"// websockets not supported yet\nio.configure(function() {\n   io.set(\"transports\", [\"xhr-polling\"]);\n   io.set(\"polling duration\", 10);\n});\n\n"],[0,"function"]],"start1":164,"start2":164,"length1":16,"length2":156},{"diffs":[[0,"  });\n}\n"],[1,"\nfunction cell(_x, _y) {\n   this.x = _x;\n   this.y = _y;\n\n   this.energy = 0;\n   this.threshold = 100;\n   this.gotGrass = false;\n   this.spreadTo = false;\n\n\n   this.gotRabbit = false;\n   this.rabbitEnergy = 100;\n   this.rabbitThreshold = 200;\n   this.reporduce = false;\n   this.hop = false\n\n\n   this.update = update;\n\n   function update() {\n      if (this.gotRabbit) {\n         if (this.rabbitEnergy > this.rabbitThreshold) {\n            this.rabbitEnergy /= 2;\n            this.reproduce = true;\n         }\n         else {\n            this.rabbitEnergy--;\n            if (this.energy <= 25) {\n               if ((Math.floor(Math.random() * 10) % 10) == 1) {\n                  this.rabbitEnergy -= 5;\n                  this.hop = true;\n               }\n            }\n            if (this.energy > 0) {\n               this.rabbitEnergy += 5;\n               this.energy -= 2;\n            }\n         }\n         if (this.rabbitEnergy <= 0) this.gotRabbit = false;\n      }\n\n      if (this.gotGrass) {\n         if (this.energy > this.threshold) {\n            //choose random cell\n            //add to cell\n            this.energy /= 2;\n            this.spreadTo = true;\n\n         }\n         else {\n            this.energy++;\n         }\n         if (this.energy <= 0) {\n            this.energy = 0;\n            this.gotGrass = false;\n         }\n      }\n   }\n}\n\nvar Forest = function() {\n   this.maxTrees = 1000;\n   this.growthRate = 1;\n   this.trees = 0;\n   this.updateForest = updateForest;\n   this.setLevel = setLevel;\n   this.level = 1;\n   this.wood = 0;\n   this.deathRate = 0.001;\n   this.maxWood = 500;\n\n   function setLevel(level) {\n      this.level = level;\n      this.growthRate *= level;\n      this.maxTrees *= level;\n\n      this.maxWood *= level;\n   }\n\n   function updateForest(dt) {\n      this.trees += (this.growthRate * dt);\n\n      if (this.trees > this.maxTrees) this.trees = this.maxTrees;\n\n      this.wood += this.trees * (this.deathRate * dt);\n      this.trees -= this.deathRate * dt;\n\n      if (this.wood > this.maxWood) this.wood = this.maxWood;\n      if (this.trees < 0) this.trees = 0;\n   }\n};\n\nvar Field = function() {\n   this.cells = {};\n   this.numCells = 10;\n};\n\n\nField.prototype.speadTo = function(x, y) {\n   var newX = ((Math.floor(Math.random() * 3)) - 1);\n   var newY = ((Math.floor(Math.random() * 3)) - 1);\n   console.log(\"multiply \" + x + \" , \" + y);\n\n   if (x + newX >= this.numCells) return;\n   if (x + newX <= 0) return;\n\n   if (y + newY >= this.numCells) return;\n   if (y + newY <= 0) return;\n\n   this.cells[x + newX][y + newY].gotGrass = true;\n   this.cells[x + newX][y + newY].energy = 35;\n};\n/*\nfunction hop(x,y){\n   var newX=(Math.floor(Math.random() * 4))-2;\n   var newY=(Math.floor(Math.random() * 4))-2;\n//console.log(newX +\" \"  + newY + \" \"+x + \" \"+y);\n   if(x+newX >= numCells) return;\n   if(x+newX <= 0) return;\n   \n   if(y+newY >= numCells) return;\n   if(y+newY <=0) return;\n\n   this.cells[x][y].gotRabbit = false;\n   this.cells[x+newX][y+newY].gotRabbit=true;\n}\n\nfunction reproduce(x,y){\n  newX=((Math.floor(Math.random() * 3))-1)\n  newY=((Math.floor(Math.random() * 3))-1)\n\n  if(x+newX >=numCells) return;\n  if(x+newX <= 0) return;\n   \n   if(y+newY >= numCells) return;\n   if(y+newY <=0) return;\n\n   this.cells[x+newX][y+newY].gotRabbit=true;\n   this.cells[x+newX][y+newY].rabbitEnergy=50;\n}\n\n*/\n\nField.prototype.init = function(_cells) {\n   this.cells = _cells;\n   this.cells[2][2].gotGrass = true;\n   this.cells[2][2].energy = 100;\n   this.cells[2][9].gotGrass = true;\n   this.cells[2][9].energy = 100;\n   this.cells[5][5].gotGrass = true;\n   this.cells[5][5].energy = 100;\n   this.cells[6][5].gotGrass = true;\n   this.cells[6][5].energy = 100;\n   this.cells[5][4].gotGrass = true;\n   this.cells[5][4].energy = 100;\n   this.cells[4][4].gotGrass = true;\n   this.cells[4][4].energy = 100;\n\n   this.cells[9][2].gotGrass = true;\n   this.cells[9][2].energy = 100;\n   this.cells[9][9].gotGrass = true;\n   this.cells[9][9].energy = 100;\n\n   this.cells[5][5].gotRabbit = true;\n   this.cells[2][2].gotRabbit = true;\n   this.cells[9][9].gotRabbit = true;\n   this.cells[5][5].gotRabbit = true;\n};\n\nField.prototype.update = function() {\n   for (var i = 0; i < this.numCells; i++) {\n      for (var j = 0; j < this.numCells; j++) {\n         this.cells[i][j].update();\n         if (this.cells[i][j].spreadtTo) {\n            console.log(\"tye spread\");\n            this.spreadTo(i, j);\n            this.cells[i][j].spreadTo = false;\n         }\n      }\n   }\n};\n\nvar cells = {};\nvar numCells = 10;\n\nfor (var i = 0; i < numCells; i++) {\n   var cellsRow = {};\n   for (var j = 0; j < numCells; j++) {\n      cellsRow[j] = new cell(i, j);\n   }\n   cells[i] = cellsRow;\n}\n\nvar fields = new Field();\nfields.init(cells);\nsetInterval(function() {\n   fields.update();\n}, 100);\n\nvar dt = new Date().getTime();\nvar lastUpdate = dt;\n\nsetInterval(sendTime, 1000);\n\nfunction sendTime() {\n   io.sockets.emit('updateTime', new Date());\n   dt = new Date().getTime() - lastUpdate;\n   lastUpdate = new Date().getTime();\n\n   io.sockets.emit('refresh', 1);\n   io.sockets.emit('cells', fields.cells);\n}\n\n// usernames which are currently connected to the chat\nvar usernames = {};\nio.sockets.on('connection', function(socket) {\n   // when the client emits 'adduser', this listens and executes\n   socket.on('adduser', function(username) {\n\n      // we store the username in the socket session for this client\n      socket.username = username;\n\n      // add the client's username to the global list\n      usernames[username] = username;\n\n      // echo to client they've connected\n      socket.emit('updatechat', 'SERVER', 'you have connected');\n\n      // echo globally (all clients) that a person has connected\n      socket.broadcast.emit('updatechat', 'SERVER', username + ' has connected');\n\n      // update the list of users in chat, client-side\n      io.sockets.emit('updateusers', usernames);\n\n   });\n\n   // when the user disconnects.. perform this\n   socket.on('disconnect', function() {\n      // remove the username from global usernames list\n      delete usernames[socket.username];\n\n      // update list of users in chat, client-side\n      io.sockets.emit('updateusers', usernames);\n\n      // echo globally that this client has left\n      socket.broadcast.emit('updatechat', 'SERVER', socket.username + ' has disconnected');\n   });\n});"]],"start1":565,"start2":565,"length1":8,"length2":6349}]],"length":6914,"saved":false}
{"ts":1360490649681,"patch":[[{"diffs":[[0,"date();\n"],[1,"\n"],[0,"        "]],"start1":4863,"start2":4863,"length1":16,"length2":17},{"diffs":[[0,"    "],[-1,"console.log(\"tye spread\");\n            this."],[0,"spre"]],"start1":4923,"start2":4923,"length1":52,"length2":8}]],"length":6871,"saved":false}
{"ts":1360490755490,"patch":[[{"diffs":[[0,"        "],[1,"this."],[0,"spreadTo"]],"start1":4919,"start2":4919,"length1":16,"length2":21}]],"length":6876,"saved":false}
{"ts":1360490789865,"patch":[[{"diffs":[[0,"- 1);\n  "],[1,"//"],[0," console"]],"start1":2898,"start2":2898,"length1":16,"length2":18}]],"length":6878,"saved":false}
{"ts":1360490918707,"patch":[[{"diffs":[[0,"= true;\n"],[-1,"\n"],[0,"        "]],"start1":1729,"start2":1729,"length1":17,"length2":16}]],"length":6877,"saved":false}
{"ts":1360491136448,"patch":[[{"diffs":[[0,"preadtTo"],[1," == true"],[0,") {\n    "]],"start1":4904,"start2":4904,"length1":16,"length2":24}]],"length":6885,"saved":false}
{"ts":1360491337790,"patch":[[{"diffs":[[0,"tTo "],[-1,"== true"],[0,") {\n"]],"start1":4909,"start2":4909,"length1":15,"length2":8},{"diffs":[[0,"readTo = false;\n"],[1,"            this.cells[i][j].gotRabbit=true;\n"],[0,"         }\n     "]],"start1":4981,"start2":4981,"length1":32,"length2":77}]],"length":6923,"saved":false}
{"ts":1360491562931,"patch":[[{"diffs":[[0,"].spread"],[-1,"t"],[0,"To ) {\n "]],"start1":4901,"start2":4901,"length1":17,"length2":16}]],"length":6922,"saved":false}
{"ts":1360491736981,"patch":[[{"diffs":[[0,") {\n            "],[1,"//"],[0,"this.spreadTo(i,"]],"start1":4912,"start2":4912,"length1":32,"length2":34},{"diffs":[[0,"[i][j].spreadTo "],[1," "],[0,"= false;\n       "]],"start1":4973,"start2":4973,"length1":32,"length2":33},{"diffs":[[0,"[i][j].gotRabbit"],[-1,"="],[1," = "],[0,"true;\n         }"]],"start1":5021,"start2":5021,"length1":33,"length2":35}]],"length":6927,"saved":false}
{"ts":1360491917068,"patch":[[{"diffs":[[0,"tRabbit = true;\n"],[1,"            this.cells[i][j].rabbitEnergy=100;\n"],[0,"         }\n     "]],"start1":5030,"start2":5030,"length1":32,"length2":79}]],"length":6974,"saved":false}
{"ts":1360492108860,"patch":[[{"diffs":[[0,"        "],[-1,"//"],[0,"this.spr"]],"start1":4920,"start2":4920,"length1":18,"length2":16},{"diffs":[[0,"se;\n            "],[1,"//"],[0,"this.cells[i][j]"]],"start1":4993,"start2":4993,"length1":32,"length2":34},{"diffs":[[0,"ue;\n            "],[1,"//"],[0,"this.cells[i][j]"]],"start1":5042,"start2":5042,"length1":32,"length2":34}]],"length":6976,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360535532803,"patch":[[{"diffs":[[1,"//"],[0,"var app = re"]],"start1":0,"start2":0,"length1":12,"length2":14},{"diffs":[[0,"ndler);\n"],[1,"//"],[0,"var fs ="]],"start1":43,"start2":43,"length1":16,"length2":18},{"diffs":[[0,"('fs');\n"],[1,"//"],[0,"var io ="]],"start1":69,"start2":69,"length1":16,"length2":18},{"diffs":[[0,"n(app);\n"],[1,"//"],[0,"var port"]],"start1":114,"start2":114,"length1":16,"length2":18},{"diffs":[[0,"| 5000;\n"],[1,"//"],[0,"app.list"]],"start1":153,"start2":153,"length1":16,"length2":18},{"diffs":[[0,"ted yet\n"],[1,"/*"],[0,"io.confi"]],"start1":206,"start2":206,"length1":16,"length2":18},{"diffs":[[0,"unction() {\n"],[-1,""],[0,"   io.set(\"t"]],"start1":230,"start2":230,"length1":24,"length2":24},{"diffs":[[0,"10);\n});"],[-1,"\n"],[1,"*/\n/*"],[0,"\nfunctio"]],"start1":314,"start2":314,"length1":17,"length2":21},{"diffs":[[0,"   });\n}"],[1,"\n*/"],[0,"\n\nfuncti"]],"start1":580,"start2":580,"length1":16,"length2":19},{"diffs":[[0,"- 1);\n  "],[-1,"//"],[0," console"]],"start1":2916,"start2":2916,"length1":18,"length2":16},{"diffs":[[0,"date();\n"],[-1,"\n"],[0,"        "]],"start1":4881,"start2":4881,"length1":17,"length2":16},{"diffs":[[0,"readTo  = false;"],[-1,"\n"],[0,"            //th"]],"start1":4996,"start2":4996,"length1":33,"length2":32},{"diffs":[[0,"    "],[-1,"  //this.cells[i][j].gotRabbit = true;\n            //this.cells[i][j].rabbitEnergy=100;"],[0,"\n   "]],"start1":5018,"start2":5018,"length1":95,"length2":8}]],"length":6904,"saved":false}
{"ts":1360535567582,"patch":[[{"diffs":[[0,"1000);\n\n"],[1,"/*\n"],[0,"function"]],"start1":5430,"start2":5430,"length1":16,"length2":19},{"diffs":[[0,";\n   });\n});"],[1,"*/"]],"start1":6895,"start2":6895,"length1":12,"length2":14}]],"length":6909,"saved":false}
{"ts":1360535658491,"patch":[[{"diffs":[[0," = dt;\n\n"],[1,"//"],[0,"setInter"]],"start1":5400,"start2":5400,"length1":16,"length2":18}]],"length":6911,"saved":false}
{"ts":1360535956599,"patch":[[{"diffs":[[0,"otype.sp"],[1,"r"],[0,"eadTo = "]],"start1":2783,"start2":2783,"length1":16,"length2":17}]],"length":6912,"saved":false}
{"ts":1360537528924,"patch":[[{"diffs":[[0,"this.rep"],[-1,"o"],[0,"r"],[1,"o"],[0,"duce = f"]],"start1":838,"start2":838,"length1":18,"length2":18},{"diffs":[[0," 1);\n   "],[-1,""],[0,""],[1,"//"],[0,"console."]],"start1":2918,"start2":2918,"length1":16,"length2":18},{"diffs":[[0,"\n};\n"],[-1,"/*\n"],[1,"\nField.prototype.hop = "],[0,"function"],[-1," hop"],[0,"(x,y"]],"start1":3214,"start2":3214,"length1":23,"length2":39},{"diffs":[[0," 4))-2;\n"],[-1,"//"],[1,"   "],[0,"console."]],"start1":3342,"start2":3342,"length1":18,"length2":19},{"diffs":[[0,"ole.log("],[1,"\"hop \"+"],[0,"newX +\" "]],"start1":3357,"start2":3357,"length1":16,"length2":23},{"diffs":[[0,"e;\n}"],[1,";"],[0,"\n\n"],[-1,"function reproduce"],[1,"\nField.prototype.reproduce = function"],[0,"(x,y"]],"start1":3616,"start2":3616,"length1":28,"length2":48},{"diffs":[[0,"x,y){\n  "],[1,"var "],[0,"newX=((M"]],"start1":3661,"start2":3661,"length1":16,"length2":20},{"diffs":[[0,"* 3))-1)"],[1,";"],[0,"\n  "],[1,"var "],[0,"newY=((M"]],"start1":3705,"start2":3705,"length1":19,"length2":24},{"diffs":[[0,"* 3))-1)"],[-1,"\n"],[1,";\n  console.log(\"reproduce \" +newX +\" \"  + newY + \" \"+x + \" \"+y);"],[0,"\n  if(x+"]],"start1":3753,"start2":3753,"length1":17,"length2":81},{"diffs":[[0,"+newX >="],[1,"this."],[0,"numCells"]],"start1":3833,"start2":3833,"length1":16,"length2":21},{"diffs":[[0,"   if(y+newY >= "],[1,"this."],[0,"numCells) return"]],"start1":3894,"start2":3894,"length1":32,"length2":37},{"diffs":[[0,"0;\n}"],[-1,"\n\n*/"],[1,";"],[0,"\n\nFi"]],"start1":4050,"start2":4050,"length1":12,"length2":9},{"diffs":[[0,"        "],[-1,""],[0,""],[1,"\n         }\n         if(this.cells[i][j].hop){ \n            this.hop(i,j);\n            this.cells[i][j].hop = false;\n         }\n         \n         if(this.cells[i][j].reproduce){\n            this.reproduce(i,j);\n            this.cells[i][j].reproduce=false;"],[0,"\n       "]],"start1":5141,"start2":5141,"length1":16,"length2":273}]],"length":7295,"saved":false}
{"ts":1360537747697,"patch":[[{"diffs":[[-1,"//"],[0,"var app = re"]],"start1":0,"start2":0,"length1":14,"length2":12},{"diffs":[[0,"ndler);\n"],[-1,"//"],[0,"var fs ="]],"start1":41,"start2":41,"length1":18,"length2":16},{"diffs":[[0,"('fs');\n"],[-1,"//"],[0,"var io ="]],"start1":65,"start2":65,"length1":18,"length2":16},{"diffs":[[0,"n(app);\n"],[-1,"//"],[0,"var port"]],"start1":108,"start2":108,"length1":18,"length2":16},{"diffs":[[0,"| 5000;\n"],[-1,"//"],[0,"app.list"]],"start1":145,"start2":145,"length1":18,"length2":16},{"diffs":[[0,"ted yet\n"],[-1,"/*"],[0,"io.confi"]],"start1":196,"start2":196,"length1":18,"length2":16},{"diffs":[[0,"unction() {\n"],[1,""],[0,"   io.set(\"t"]],"start1":218,"start2":218,"length1":24,"length2":24},{"diffs":[[0,"\n});"],[-1,"*/\n/*"],[1,"\n"],[0,"\nfun"]],"start1":306,"start2":306,"length1":13,"length2":9},{"diffs":[[0,";\n}\n"],[-1,"*/"],[0,"\n"],[1,""],[0,"\nfun"]],"start1":569,"start2":569,"length1":11,"length2":9},{"diffs":[[0,")-2;\n   "],[1,"//"],[0,"console."]],"start1":3327,"start2":3327,"length1":16,"length2":18},{"diffs":[[0,")-1);\n  "],[1,"//"],[0,"console."]],"start1":3741,"start2":3741,"length1":16,"length2":18},{"diffs":[[0,");\n\n"],[-1,"/*"],[0,"\n"],[1,""],[0,"func"]],"start1":5806,"start2":5806,"length1":11,"length2":9},{"diffs":[[0,"});\n"],[1,""],[0,"});"],[-1,"*/"]],"start1":7270,"start2":7270,"length1":9,"length2":7}]],"length":7277,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360550267728,"patch":[[{"diffs":[[0," = dt;\n\n"],[-1,"//"],[0,"setInter"]],"start1":5770,"start2":5770,"length1":18,"length2":16}]],"length":7275,"saved":false}
{"ts":1360550397625,"patch":[[{"diffs":[[0,"false;\n\n"],[-1,"\n"],[0,"   this."]],"start1":722,"start2":722,"length1":17,"length2":16},{"diffs":[[0," false\n\n"],[-1,"\n"],[0,"   this."]],"start1":856,"start2":856,"length1":17,"length2":16},{"diffs":[[0,"s = 10;\n"],[1,"   this.grass_amt =0;\n   this.rabbit_amt=0;\n"],[0,"};\n\n\nFie"]],"start1":2740,"start2":2740,"length1":16,"length2":60},{"diffs":[[0,"lse;    "],[1,"\n"],[0,"      "],[1,"      this.grass_amt++;"],[0,"\n       "]],"start1":5163,"start2":5163,"length1":22,"length2":46},{"diffs":[[0,"duce=false;\n"],[1,"            this.rabbit_amt++;\n"],[0,"         }\n "]],"start1":5447,"start2":5447,"length1":24,"length2":55}]],"length":7372,"saved":false}
{"ts":1360550823356,"patch":[[{"diffs":[[0,"n(_cells) {\n"],[1,"//"],[0,"   this.cell"]],"start1":4115,"start2":4115,"length1":24,"length2":26},{"diffs":[[0,"_cells;\n"],[1,"//"],[0,"   this."]],"start1":4145,"start2":4145,"length1":16,"length2":18},{"diffs":[[0,"otGrass = true;\n"],[1,"//"],[0,"   this.cells[2]"]],"start1":4176,"start2":4176,"length1":32,"length2":34},{"diffs":[[0,"].energy = 100;\n"],[1,"//"],[0,"   this.cells[2]"]],"start1":4212,"start2":4212,"length1":32,"length2":34},{"diffs":[[0,"otGrass = true;\n"],[1,"//"],[0,"   this.cells[2]"]],"start1":4251,"start2":4251,"length1":32,"length2":34},{"diffs":[[0,"].energy = 100;\n"],[1,"//"],[0,"   this.cells[5]"]],"start1":4287,"start2":4287,"length1":32,"length2":34},{"diffs":[[0,"otGrass = true;\n"],[1,"//"],[0,"   this.cells[5]"]],"start1":4326,"start2":4326,"length1":32,"length2":34},{"diffs":[[0,"].energy = 100;\n"],[1,"//"],[0,"   this.cells[6]"]],"start1":4362,"start2":4362,"length1":32,"length2":34},{"diffs":[[0,"otGrass = true;\n"],[1,"//"],[0,"   this.cells[6]"]],"start1":4401,"start2":4401,"length1":32,"length2":34},{"diffs":[[0,"].energy = 100;\n"],[1,"//"],[0,"   this.cells[5]"]],"start1":4437,"start2":4437,"length1":32,"length2":34},{"diffs":[[0,"otGrass = true;\n"],[1,"//"],[0,"   this.cells[5]"]],"start1":4476,"start2":4476,"length1":32,"length2":34},{"diffs":[[0,"].energy = 100;\n"],[1,"//"],[0,"   this.cells[4]"]],"start1":4512,"start2":4512,"length1":32,"length2":34},{"diffs":[[0,"otGrass = true;\n"],[1,"//"],[0,"   this.cells[4]"]],"start1":4551,"start2":4551,"length1":32,"length2":34},{"diffs":[[0,"].energy = 100;\n"],[-1,"\n"],[1,"//\n//"],[0,"   this.cells[9]"]],"start1":4587,"start2":4587,"length1":33,"length2":37},{"diffs":[[0,"otGrass = true;\n"],[1,"//"],[0,"   this.cells[9]"]],"start1":4629,"start2":4629,"length1":32,"length2":34},{"diffs":[[0,"].energy = 100;\n"],[1,"//"],[0,"   this.cells[9]"]],"start1":4665,"start2":4665,"length1":32,"length2":34},{"diffs":[[0,"otGrass = true;\n"],[1,"//"],[0,"   this.cells[9]"]],"start1":4704,"start2":4704,"length1":32,"length2":34},{"diffs":[[0," = 100;\n"],[-1,"\n"],[1,"//\n//"],[0,"   this."]],"start1":4748,"start2":4748,"length1":17,"length2":21},{"diffs":[[0,"tRabbit = true;\n"],[1,"//"],[0,"   this.cells[2]"]],"start1":4783,"start2":4783,"length1":32,"length2":34},{"diffs":[[0,"tRabbit = true;\n"],[1,"//"],[0,"   this.cells[9]"]],"start1":4823,"start2":4823,"length1":32,"length2":34},{"diffs":[[0,"tRabbit = true;\n"],[1,"//"],[0,"   this.cells[5]"]],"start1":4863,"start2":4863,"length1":32,"length2":34},{"diffs":[[0,"unction() {\n"],[1,"   this.rabbit_amt=0;\n   this.grass_amt=0;\n   \n"],[0,"   for (var "]],"start1":4949,"start2":4949,"length1":24,"length2":71},{"diffs":[[0,"lls; j++) {\n"],[1,"         if(this.cells[i][j].gotRabbit) this.rabbit_amt++;\n         if(this.cells[i][j].gotGrass) this.grass_amt++;\n"],[0,"         thi"]],"start1":5089,"start2":5089,"length1":24,"length2":140},{"diffs":[[0,"\n      }\n   "],[-1,""],[0,""],[1,"}\n   \n   if(this.grass_amt<=5) {cells[5][5].gotGrass=true; cells[5][5].energy=100};\n   if(this.rabbit_amt<=0) {cells[2][2].gotRabbit=true;cells[2][2].rabbitEnergy=100;"],[0,"}\n};\n\nvar ce"]],"start1":5709,"start2":5709,"length1":24,"length2":191}]],"length":7748,"saved":false}
{"ts":1360550998461,"patch":[[{"diffs":[[0," = false"],[1,";"],[0,"\n\n   thi"]],"start1":854,"start2":854,"length1":16,"length2":17},{"diffs":[[0," }\n   \n   if"],[1," "],[0,"(this.grass_"]],"start1":5721,"start2":5721,"length1":24,"length2":25},{"diffs":[[0,"_amt"],[1," "],[0,"<="],[1," "],[0,"5) {"],[1,"\n      "],[0,"cell"]],"start1":5745,"start2":5745,"length1":14,"length2":23},{"diffs":[[0,"gotGrass"],[-1,"="],[1," = "],[0,"true;"],[1,"\n     "],[0," cells[5"]],"start1":5776,"start2":5776,"length1":22,"length2":30},{"diffs":[[0,"ergy"],[-1,"=100};"],[1," = 100;\n   }"],[0,"\n   if"],[1," "],[0,"(thi"]],"start1":5813,"start2":5813,"length1":20,"length2":27},{"diffs":[[0,"_amt"],[1," "],[0,"<="],[1," "],[0,"0) {"],[1,"\n      "],[0,"cell"]],"start1":5848,"start2":5848,"length1":14,"length2":23},{"diffs":[[0,"otRabbit"],[-1,"="],[1," = "],[0,"true;"],[1,"\n      "],[0,"cells[2]"]],"start1":5880,"start2":5880,"length1":22,"length2":31},{"diffs":[[0,"ergy"],[-1,"="],[1," = "],[0,"100;"],[1,"\n   "],[0,"}\n};"]],"start1":5923,"start2":5923,"length1":13,"length2":19}]],"length":7798,"saved":false}
{"ts":1360551203526,"patch":[[{"diffs":[[0,"ells) {\n"],[-1,"//"],[1,"   // kind of dodgy way to get reference to the cells\n"],[0,"   this."]],"start1":4120,"start2":4120,"length1":18,"length2":70},{"diffs":[[0,"_cells;\n"],[1,"   \n"],[0,"//   thi"]],"start1":4198,"start2":4198,"length1":16,"length2":20}]],"length":7854,"saved":false}
{"ts":1360551550594,"patch":[[{"diffs":[[0,"lls; j++) {\n"],[1,"         this.cells[i][j].update();\n         \n"],[0,"         if("]],"start1":5146,"start2":5146,"length1":24,"length2":70},{"diffs":[[0,"s.rabbit_amt++;\n"],[-1,""],[0,"         if(this"]],"start1":5247,"start2":5247,"length1":32,"length2":32},{"diffs":[[0,"    "],[-1,"this.cells[i][j].update();"],[1,"         "],[0,"\n   "]],"start1":5325,"start2":5325,"length1":34,"length2":17},{"diffs":[[0,"= false;    "],[-1,"\n"],[0,"            "]],"start1":5454,"start2":5454,"length1":25,"length2":24},{"diffs":[[0,"    "],[-1,"   this.grass_amt++;"],[0,"\n   "]],"start1":5471,"start2":5471,"length1":28,"length2":8},{"diffs":[[0,"oduce=false;"],[-1,"\n"],[0,"            "]],"start1":5720,"start2":5720,"length1":25,"length2":24},{"diffs":[[0,"        "],[-1,"this.rabbit_amt++;"],[0,"\n       "]],"start1":5736,"start2":5736,"length1":34,"length2":16}]],"length":7843,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360622415585,"patch":[[{"diffs":[[0,"y = "],[-1,"35"],[1,"100"],[0,";\n};"]],"start1":3232,"start2":3232,"length1":10,"length2":11},{"diffs":[[0,"abbit=true;\n"],[1,"   this.cells[x+newX][y+newY].rabbitEnergy=this.cells[x][y].rabbitEnergy;\n   this.cells[x][y].rabbitEnergy=0;\n"],[0,"};\n\n\nField.p"]],"start1":3635,"start2":3635,"length1":24,"length2":134},{"diffs":[[0,"preadTo "],[-1," "],[1,""],[0,"= false;"]],"start1":5556,"start2":5556,"length1":17,"length2":16},{"diffs":[[0,"  }\n   }\n   "],[-1,""],[1,"var x,y =0;"],[0,"\n   if (this"]],"start1":5870,"start2":5870,"length1":24,"length2":35},{"diffs":[[0,"amt <= 5) {\n"],[1,"      x=((Math.floor(Math.random() * 8)));\n      y=((Math.floor(Math.random() * 8)));\n"],[0,"      cells["]],"start1":5912,"start2":5912,"length1":24,"length2":110},{"diffs":[[0,"      cells["],[-1,"5][5"],[1,"x][y"],[0,"].gotGrass ="]],"start1":6010,"start2":6010,"length1":28,"length2":28},{"diffs":[[0,"      cells["],[-1,"5][5"],[1,"x][y"],[0,"].energy = 1"]],"start1":6045,"start2":6045,"length1":28,"length2":28},{"diffs":[[0,"amt <= 0) {\n"],[1,"      x=((Math.floor(Math.random() * 8)));\n      y=((Math.floor(Math.random() * 8)));\n"],[0,"      cells["]],"start1":6101,"start2":6101,"length1":24,"length2":110},{"diffs":[[0,"      cells["],[-1,"2][2"],[1,"x][y"],[0,"].gotRabbit "]],"start1":6199,"start2":6199,"length1":28,"length2":28},{"diffs":[[0,"  cells["],[-1,"2][2"],[1,"x][y"],[0,"].rabbit"]],"start1":6239,"start2":6239,"length1":20,"length2":20}]],"length":8136,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360637578341,"patch":[[{"diffs":[[0," fields."],[-1,"cells"],[1,"toString()"],[0,");\n}\n\n//"]],"start1":6881,"start2":6881,"length1":21,"length2":26}]],"length":8141,"saved":false}
{"ts":1360638953058,"patch":[[{"diffs":[[0,"rgy=50;\n};\n\n"],[1,"\n"],[0,"Field.protot"]],"start1":4185,"start2":4185,"length1":24,"length2":25},{"diffs":[[0,"    \n         }\n"],[1,"         \n         io.sockets.emmit('updateCell',i,j,this.cells[i][j].gotRabbit,this.cells[i][j].gotGrass)\n"],[0,"      }\n   }\n   "]],"start1":5851,"start2":5851,"length1":32,"length2":139},{"diffs":[[0,"sh', 1);\n   "],[1,"//"],[0,"io.sockets.e"]],"start1":6953,"start2":6953,"length1":24,"length2":26},{"diffs":[[0,"lds."],[-1,"toString()"],[1,"cells"],[0,");\n}"]],"start1":6995,"start2":6995,"length1":18,"length2":13}]],"length":8246,"saved":false}
