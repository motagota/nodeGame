{"ts":1360484329275,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<<<<<<< HEAD\n\nvar app = require('http').createServer(handler);\nvar fs = require('fs');\nvar io = require('socket.io').listen(app);\nvar port = process.env.PORT || 5000;\napp.listen(port);\n\n// websockets not supported yet\nio.configure(function () {\n   io.set(\"transports\", [\"xhr-polling\"]); \n   io.set(\"polling duration\", 10); \n=======\nvar app = require('http').createServer(handler);\n\nvar fs = require('fs');\nvar io = require('socket.io').listen(app);\n\nvar port = process.env.PORT || 5000;\n\tapp.listen(port);\n\n\n//var world = require(\"./world.js\");\n\n\n// websockets not supported yet\nio.configure(function () { \n io.set(\"transports\", [\"xhr-polling\"]); \n  io.set(\"polling duration\", 10); \n>>>>>>> 92673ac4748412291170feb19e54329eb6be317b\n});\n\nfunction handler (req, res) {\n  fs.readFile(__dirname + '/index.html',\n  function (err, data) {\n<<<<<<< HEAD\n     if (err) {\n=======\n    if (err) {\n>>>>>>> 92673ac4748412291170feb19e54329eb6be317b\n      res.writeHead(500);\n      return res.end('Error loading index.html');\n    }\n\n    res.writeHead(200);\n    res.end(data);\n  });\n}\n\n<<<<<<< HEAD\nfunction cell(_x,_y){ \n  this.x=_x;\n  this.y=_y;\n\n  this.energy =0;\n  this.threshold = 100;\n  this.gotGrass = false;\n  this.spreadTo =false;\n\n\n  this.gotRabbit=false;\n  this.rabbitEnergy=100;\n  this.rabbitThreshold =200;\n  this.reporduce=false;\n  this.hop=false\n\n    \n  this.update = update;\n  function update(){\n     if(this.gotRabbit){\n        if(this.rabbitEnergy>this.rabbitThreshold){\n           this.rabbitEnergy /=2;\n           reproduce=true;\n        }\n        else{\n           this.rabbitEnergy--;\n           if(this.energy<=25) {\n              if(( Math.floor(Math.random()*10 ) % 10) ==1){\n                 this.rabbitEnergy -= 5;\n                  hop=true;\n              }\n           }\n           if(this.energy >0)\n           {\n             this.rabbitEnergy+=5;\n             this.energy -=2;\n           }\n        }\n       if(this.rabbitEnergy<=0) this.gotRabbit=false;\n      }\n    \n     if(this.gotGrass){\n        if (this.energy > this.threshold) {\n\t   //choose random cell\n           //add to cell\n           this.energy /=2;\n           this.spreadTo=true;\n         \n       }       \n       else{\n          this.energy++;\n        }\n        if(this.energy<=0) {this.energy=0; this.gotGrass=false;}\n     }\n  }\n}\n\nvar Forest = function(){\n=======\n\nfunction Forest(){\n>>>>>>> 92673ac4748412291170feb19e54329eb6be317b\n   this.maxTrees = 1000;\n   this.growthRate = 1;\n   this.trees =0;\n   this.updateForest = updateForest;\n   this.setLevel =setLevel;\n   this.level =1;\n   this.wood =0;\n   this.deathRate=0.001;\n   this.maxWood=500;\n   \n   function setLevel(level){\n       this.level =level;\n       this.growthRate *=level;\n       this.maxTrees *= level;\n       \n       this.maxWood *=level;\n   }\n\n   function updateForest(dt){\n      this.trees +=  (this.growthRate *dt);\n\n      if(this.trees > this.maxTrees) this.trees = this.maxTrees;\n\n      this.wood += this.trees * (this.deathRate* dt);\n      this.trees -= this.deathRate*dt;\n\n      if(this.wood > this.maxWood) this.wood = this.maxWood;\n      if(this.trees<0) this.trees=0;\n   }  \n}\n\n<<<<<<< HEAD\nvar Field = function(){\n   this.cells = {};\n   this.numCells = 10;\n};\n\n\nField.prototype.speadTo = function(x,y){  \n  var newX=((Math.floor(Math.random() * 3))-1);\n  var newY=((Math.floor(Math.random() * 3))-1);\n  console.log(\"multiply \" + x + \" , \" + y  );\n  \n   if(x+newX >= this.numCells) return;\n   if(x+newX <= 0) return;\n   \n   if(y+newY >= this.numCells) return;\n   if(y+newY <= 0) return;\n                               \n   this.cells[x+newX][y+newY].gotGrass=true;\n   this.cells[x+newX][y+newY].energy=35;\n};\n/*\nfunction hop(x,y){\n   var newX=(Math.floor(Math.random() * 4))-2;\n   var newY=(Math.floor(Math.random() * 4))-2;\n//console.log(newX +\" \"  + newY + \" \"+x + \" \"+y);\n   if(x+newX >= numCells) return;\n   if(x+newX <= 0) return;\n   \n   if(y+newY >= numCells) return;\n   if(y+newY <=0) return;\n\n   this.cells[x][y].gotRabbit = false;\n   this.cells[x+newX][y+newY].gotRabbit=true;\n}\n\nfunction reproduce(x,y){\n  newX=((Math.floor(Math.random() * 3))-1)\n  newY=((Math.floor(Math.random() * 3))-1)\n\n  if(x+newX >=numCells) return;\n  if(x+newX <= 0) return;\n   \n   if(y+newY >= numCells) return;\n   if(y+newY <=0) return;\n\n   this.cells[x+newX][y+newY].gotRabbit=true;\n   this.cells[x+newX][y+newY].rabbitEnergy=50;\n}\n\n*/\n\nField.prototype.init = function(_cells) {\n   this.cells=_cells;\n   this.cells[2][2].gotGrass =  true;\n   this.cells[2][2].energy = 100;\n   this.cells[2][9].gotGrass  = true;\n   this.cells[2][9].energy = 100;\n   this.cells[5][5].gotGrass  = true;\n   this.cells[5][5].energy = 100;\n   this.cells[6][5].gotGrass  = true;\n   this.cells[6][5].energy = 100;\n   this.cells[5][4].gotGrass  = true;\n   this.cells[5][4].energy = 100;\n   this.cells[4][4].gotGrass  = true;\n   this.cells[4][4].energy = 100;\n\n   this.cells[9][2].gotGrass  = true;\n   this.cells[9][2].energy = 100;\n   this.cells[9][9].gotGrass  = true;\n   this.cells[9][9].energy = 100;\n\n   this.cells[5][5].gotRabbit = true;\n   this.cells[2][2].gotRabbit = true;\n   this.cells[9][9].gotRabbit = true;\n   this.cells[5][5].gotRabbit = true;\n};\n\n\n\nField.prototype.update = function(){    \n   for (var i=0;i<this.numCells;i++){\n      for(var j=0;j<this.numCells;j++){\n         this.cells[i][j].update();\n         if(this.cells[i][j].spreadtTo){ \n            console.log(\"tye spread\");\n            this.spreadTo(i,j);\n            this.cells[i][j].spreadTo=false;\n         }\n      }\n   }\n};\n\nvar cells={};\nvar numCells=10;\n\nfor (var i=0;i<numCells;i++){\n       var cellsRow = {};\n       for (var j=0;j<numCells;j++){\n         cellsRow[j] = new cell(i,j);\n       }\n   cells[i]= cellsRow;\n}\n\nvar fields =  new Field();\nfields.init(cells);\nsetInterval(function(){ fields.update(); }, 100 );\t\n\nvar dt=new Date().getTime();\nvar lastUpdate = dt;\n\n=======\nvar f1 = {};\nfor(i=0; i<10;i++){  f1[i] = new Forest(); f1[i].setLevel(i);}\nvar dt=new Date().getTime();\nvar lastUpdate = dt;\nvar count=0\n>>>>>>> 92673ac4748412291170feb19e54329eb6be317b\nsetInterval(sendTime, 1000);\nfunction sendTime(){\n   io.sockets.emit('updateTime', new Date());\n   dt = new Date().getTime()-lastUpdate;\n   lastUpdate = new Date().getTime();\n<<<<<<< HEAD\n    \n   io.sockets.emit('refresh',1);\n   io.sockets.emit('cells',fields.cells);\n=======\n   for( i=0;i<10;i++) f1[i].updateForest(dt/1000);\n   count++;\n   count = count %10;\n   io.sockets.emit('updateForest', count, f1[count]);\n>>>>>>> 92673ac4748412291170feb19e54329eb6be317b\n   \n}\n\n// usernames which are currently connected to the chat\nvar usernames = {};\n\nio.sockets.on('connection', function (socket) {\n<<<<<<< HEAD\n   // when the client emits 'adduser', this listens and executes\n   \n   socket.on('adduser', function(username){\n   \n   // we store the username in the socket session for this client\n=======\n\n   socket.on('updateForest',function(index){\nio.sockets.emit('updateForest', index, f1[index]);\n});\n\n   // when the client emits 'sendchat', this listens and executes\n   socket.on('sendchat', function (data) {\n\n   // we tell the client to execute 'updatechat' ith 2 parameters\n   io.sockets.emit('updatechat', socket.username, data);\n});\n\n   // when the client emits 'adduser', this listens and executes\nsocket.on('adduser', function(username){\n   // we store the username in the socket session for this client\n\n>>>>>>> 92673ac4748412291170feb19e54329eb6be317b\n   socket.username = username;\n\n   // add the client's username to the global list\n   usernames[username] = username;\n\n  // echo to client they've connected\n   socket.emit('updatechat', 'SERVER', 'you have connected');\n\n   // echo globally (all clients) that a person has connected\n   socket.broadcast.emit('updatechat', 'SERVER', username + ' has connected');\n   \n // update the list of users in chat, client-side\n   io.sockets.emit('updateusers', usernames);\n\n});\n\n\n\n// when the user disconnects.. perform this\n\nsocket.on('disconnect', function(){\n\n   // remove the username from global usernames list\n<<<<<<< HEAD\n  delete usernames[socket.username];\n\n   // update list of users in chat, client-side\n   io.sockets.emit('updateusers', usernames);\n\n   // echo globally that this client has left\n=======\n\n  delete usernames[socket.username];\n\n   // update list of users in chat, client-side\n\n   io.sockets.emit('updateusers', usernames);\n\n   // echo globally that this client has left\n\n>>>>>>> 92673ac4748412291170feb19e54329eb6be317b\n   socket.broadcast.emit('updatechat', 'SERVER', socket.username + ' has disconnected');\n\n});\n\n});\n\n"]],"start1":0,"start2":0,"length1":0,"length2":8558}]],"length":8558}
{"contributors":[],"silentsave":false,"ts":1360484562808,"patch":[[{"diffs":[[-1,"<<<<<<< HEAD\n\n"],[0,"var "]],"start1":0,"start2":0,"length1":18,"length2":4},{"diffs":[[0,"); \n"],[-1,"=======\nvar app = require('http').createServer(handler);\n\nvar fs = require('fs');\nvar io = require('socket.io').listen(app);\n\nvar port = process.env.PORT || 5000;\n\tapp.listen(port);\n\n\n//var world = require(\"./world.js\");\n\n\n// websockets not supported yet\nio.configure(function () { \n io.set(\"transports\", [\"xhr-polling\"]); \n  io.set(\"polling duration\", 10); \n>>>>>>> 92673ac4748412291170feb19e54329eb6be317b\n"],[0,"});\n"]],"start1":306,"start2":306,"length1":416,"length2":8},{"diffs":[[0,"data) {\n"],[-1,"<<<<<<< HEAD\n"],[0,"     if "]],"start1":403,"start2":403,"length1":29,"length2":16},{"diffs":[[0,") {\n"],[-1,"=======\n    if (err) {\n>>>>>>> 92673ac4748412291170feb19e54329eb6be317b\n"],[0,"    "]],"start1":423,"start2":423,"length1":80,"length2":8},{"diffs":[[0," });\n}\n\n"],[-1,"<<<<<<< HEAD\n"],[0,"function"]],"start1":554,"start2":554,"length1":29,"length2":16},{"diffs":[[0,"\n}\n\n"],[-1,"var Forest = function(){\n=======\n\nfunction Forest(){\n>>>>>>> 92673ac4748412291170feb19e54329eb6be317b"],[1,"function Forest(){"],[0,"\n   "]],"start1":1785,"start2":1785,"length1":109,"length2":26},{"diffs":[[0," }  \n}\n\n"],[-1,"<<<<<<< HEAD\n"],[0,"var Fiel"]],"start1":2521,"start2":2521,"length1":29,"length2":16},{"diffs":[[0," = dt;\n\n"],[-1,"=======\n"],[0,"var f1 ="]],"start1":5243,"start2":5243,"length1":24,"length2":16},{"diffs":[[0,"t=0\n"],[-1,">>>>>>> 92673ac4748412291170feb19e54329eb6be317b"],[0,""],[1,""],[0,"\nset"]],"start1":5385,"start2":5385,"length1":56,"length2":8},{"diffs":[[0,"Time();\n"],[-1,"<<<<<<< HEAD\n"],[0,"    \n   "]],"start1":5557,"start2":5557,"length1":29,"length2":16},{"diffs":[[0,"cells);\n"],[-1,"======="],[0,""],[1,""],[0,"\n   for("]],"start1":5637,"start2":5637,"length1":23,"length2":16},{"diffs":[[0,"]);\n"],[-1,">>>>>>> 92673ac4748412291170feb19e54329eb6be317b\n"],[0,"   \n"]],"start1":5781,"start2":5781,"length1":57,"length2":8},{"diffs":[[0,") {\n"],[-1,"<<<<<<< HEAD\n   "],[0,""],[1,""],[0,"// w"]],"start1":5912,"start2":5912,"length1":24,"length2":8},{"diffs":[[0," client\n"],[-1,"=======\n\n"],[0,"   socke"]],"start1":6088,"start2":6088,"length1":25,"length2":16},{"diffs":[[0,"ient"],[-1,"\n\n>>>>>>> 92673ac4748412291170feb19e54329eb6be317b"],[0,"\n   "]],"start1":6602,"start2":6602,"length1":58,"length2":8},{"diffs":[[0,"ist\n"],[-1,"<<<<<<< HEAD\n"],[0,"  de"]],"start1":7207,"start2":7207,"length1":21,"length2":8},{"diffs":[[0,"eft\n"],[-1,"=======\n\n  delete usernames[socket.username];\n\n   // update list of users in chat, client-side\n\n   io.sockets.emit('updateusers', usernames);\n\n   // echo globally that this client has left\n\n>>>>>>> 92673ac4748412291170feb19e54329eb6be317b"],[1,"\n\n   // echo globally that this client has left\n"],[0,"\n   "]],"start1":7386,"start2":7386,"length1":246,"length2":56}]],"length":7539,"saved":false}
{"ts":1360484713126,"patch":[[{"diffs":[[0,"var "],[-1,"io = require('socket.io').listen(app);\nvar port = process.env.PORT || 5000;\napp.listen(port);\n\n// websockets not supported yet\nio.configure(function () {\n   io.set(\"transports\", [\"xhr-polling\"]); \n   io.set(\"polling duration\", 10); \n});\n\nfunction handler (req, res) {\n  fs.readFile(__dirname + '/index.html',\n  function (err, data) {\n     if (err) {\n      res.writeHead(500);\n      return res.end('Error loading index.html');\n    }\n\n    res.writeHead(200);\n    res.end(data);\n  });\n}\n\nfunction cell(_x,_y){ \n  this.x=_x;\n  this.y=_y;\n\n  this.energy =0;\n  this.threshold = 100;\n  this.gotGrass = false;\n  this.spreadTo =false;\n\n\n  this.gotRabbit=false;\n  this.rabbitEnergy=100;\n  this.rabbitThreshold =200;\n  this.reporduce=false;\n  this.hop=false\n\n    \n  this.update = update;\n  function update(){\n     if(this.gotRabbit){\n        if(this.rabbitEnergy>this.rabbitThreshold){\n           this.rabbitEnergy /=2;\n           reproduce=true;\n        }\n        else{\n           this.rabbitEnergy--;\n           if(this.energy<=25) {\n              if(( Math.floor(Math.random()*10 ) % 10) ==1){\n                 this.rabbitEnergy -= 5;\n                  hop=true;\n              }\n           }\n           if(this.energy >0)\n           {\n             this.rabbitEnergy+=5;\n             this.energy -=2;\n           }\n        }\n       if(this.rabbitEnergy<=0) this.gotRabbit=false;\n      }\n    \n     if(this.gotGrass){\n        if (this.energy > this.threshold) {\n\t   //choose random cell\n           //add to cell\n           this.energy /=2;\n           this.spreadTo=true;\n         \n       }       \n       else{\n          this.energy++;\n        }\n        if(this.energy<=0) {this.energy=0; this.gotGrass=false;}\n     }\n  }\n}\n\nfunction Forest(){\n   this.maxTrees = 1000;\n   this.growthRate = 1;\n   this.trees =0;\n   this.updateForest = updateForest;\n   this.setLevel =setLevel;\n   this.level =1;\n   this.wood =0;\n   this.deathRate=0.001;\n   this.maxWood=500;\n   \n   function setLevel(level){\n       this.level =level;\n       this.growthRate *=level;\n       this.maxTrees *= level;\n       \n       this.maxWood *=level;\n   }\n\n   function updateForest(dt){\n      this.trees +=  (this.growthRate *dt);\n\n      if(this.trees > this.maxTrees) this.trees = this.maxTrees;\n\n      this.wood += this.trees * (this.deathRate* dt);\n      this.trees -= this.deathRate*dt;\n\n      if(this.wood > this.maxWood) this.wood = this.maxWood;\n      if(this.trees<0) this.trees=0;\n   }  \n}\n\nvar Field = function(){\n   this.cells = {};\n   this.numCells = 10;\n};\n\n\nField.prototype.speadTo = function(x,y){  \n  var newX=((Math.floor(Math.random() * 3))-1);\n  var newY=((Math.floor(Math.random() * 3))-1);\n  console.log(\"multiply \" + x + \" , \" + y  );\n  \n   if(x+newX >= this.numCells) return;\n   if(x+newX <= 0) return;\n   \n   if(y+newY >= this.numCells) return;\n   if(y+newY <= 0) return;\n                               \n   this.cells[x+newX][y+newY].gotGrass=true;\n   this.cells[x+newX][y+newY].energy=35;\n};\n/*\nfunction hop(x,y){\n   var newX=(Math.floor(Math.random() * 4))-2;\n   var newY=(Math.floor(Math.random() * 4))-2;\n//console.log(newX +\" \"  + newY + \" \"+x + \" \"+y);\n   if(x+newX >= numCells) return;\n   if(x+newX <= 0) return;\n   \n   if(y+newY >= numCells) return;\n   if(y+newY <=0) return;\n\n   this.cells[x][y].gotRabbit = false;\n   this.cells[x+newX][y+newY].gotRabbit=true;\n}\n\nfunction reproduce(x,y){\n  newX=((Math.floor(Math.random() * 3))-1)\n  newY=((Math.floor(Math.random() * 3))-1)\n\n  if(x+newX >=numCells) return;\n  if(x+newX <= 0) return;\n   \n   if(y+newY >= numCells) return;\n   if(y+newY <=0) return;\n\n   this.cells[x+newX][y+newY].gotRabbit=true;\n   this.cells[x+newX][y+newY].rabbitEnergy=50;\n}\n\n*/\n\nField.prototype.init = function(_cells) {\n   this.cells=_cells;\n   this.cells[2][2].gotGrass =  true;\n   this.cells[2][2].energy = 100;\n   this.cells[2][9].gotGrass  = true;\n   this.cells[2][9].energy = 100;\n   this.cells[5][5].gotGrass  = true;\n   this.cells[5][5].energy = 100;\n   this.cells[6][5].gotGrass  = true;\n   this.cells[6][5].energy = 100;\n   this.cells[5][4].gotGrass  = true;\n   this.cells[5][4].energy = 100;\n   this.cells[4][4].gotGrass  = true;\n   this.cells[4][4].energy = 100;\n\n   this.cells[9][2].gotGrass  = true;\n   this.cells[9][2].energy = 100;\n   this.cells[9][9].gotGrass  = true;\n   this.cells[9][9].energy = 100;\n\n   this.cells[5][5].gotRabbit = true;\n   this.cells[2][2].gotRabbit = true;\n   this.cells[9][9].gotRabbit = true;\n   this.cells[5][5].gotRabbit = true;\n};\n\n\n\nField.prototype.update = function(){    \n   for (var i=0;i<this.numCells;i++){\n      for(var j=0;j<this.numCells;j++){\n         this.cells[i][j].update();\n         if(this.cells[i][j].spreadtTo){ \n            console.log(\"tye spread\");\n            this.spreadTo(i,j);\n            this.cells[i][j].spreadTo=false;\n         }\n      }\n   }\n};\n\nvar cells={};\nvar numCells=10;\n\nfor (var i=0;i<numCells;i++){\n       var cellsRow = {};\n       for (var j=0;j<numCells;j++){\n         cellsRow[j] = new cell(i,j);\n       }\n   cells[i]= cellsRow;\n}\n\nvar fields =  new Field();\nfields.init(cells);\nsetInterval(function(){ fields.update(); }, 100 );\t\n\nvar dt=new Date().getTime();\nvar lastUpdate = dt;\n\nvar f1 = {};\nfor(i=0; i<10;i++){  f1[i] = new Forest(); f1[i].setLevel(i);}\nvar dt=new Date().getTime();\nvar lastUpdate = dt;\nvar count=0\n\nsetInterval(sendTime, 1000);\nfunction sendTime(){\n   io.sockets.emit('updateTime', new Date());\n   dt = new Date().getTime()-lastUpdate;\n   lastUpdate = new Date().getTime();\n    \n   io.sockets.emit('refresh',1);\n   io.sockets.emit('cells',fields.cells);\n\n   for( i=0;i<10;i++) f1[i].updateForest(dt/1000);\n   count++;\n   count = count %10;\n   io.sockets.emit('updateForest', count, f1[count]);\n   \n}\n\n// usernames which are currently connected to the chat\nvar usernames = {};\n\nio.sockets.on('connection', function (socket) {\n// when the client emits 'adduser', this listens and executes\n   \n   socket.on('adduser', function(username){\n   \n   // we store the username in the socket session for this client\n   socket.on('updateForest',function(index){\nio.sockets.emit('updateForest', index, f1[index]);\n});\n\n   // when the client emits 'sendchat', this listens and executes\n   socket.on('sendchat', function (data) {\n\n   // we tell the client to execute 'updatechat' ith 2 parameters\n   io.sockets.emit('updatechat', socket.username, data);\n});\n\n   // when the client emits 'adduser', this listens and executes\nsocket.on('adduser', function(username){\n   // we store the username in the socket session for this client\n   socket.username = username;\n\n   // add the client's username to the global list\n   usernames[username] = username;\n\n  // echo to client they've connected\n   socket.emit('updatechat', 'SERVER', 'you have connected');\n\n   // echo globally (all clients) that a person has connected\n   socket.broadcast.emit('updatechat', 'SERVER', username + ' has connected');\n   \n // update the list of users in chat, client-side\n   io.sockets.emit('updateusers', usernames);\n\n});\n\n\n\n// when the user disconnects.. perform this\n\nsocket.on('disconnect', function(){\n\n   // remove the username from global usernames list\n  delete usernames[socket.username];\n\n   // update list of users in chat, client-side\n   io.sockets.emit('updateusers', usernames);\n\n   // echo globally that this client has left\n\n\n   // echo globally that this client has left\n\n   socket.broadcast.emit('updatechat', 'SERVER', socket.username + ' has disconnected');\n\n});\n\n});\n"],[1,"port = process.env.PORT || 5000;\napp.listen(port);\n\nfunction handler(req, res) {\n   fs.readFile(__dirname + '/index.html',\n\n   function(err, data) {\n      if (err) {\n         res.writeHead(500);\n         return res.end('Error loading index.html');\n      }\n\n      res.writeHead(200);\n      res.end(data);\n   });\n}"],[0,"\n"]],"start1":73,"start2":73,"length1":7466,"length2":317}]],"length":390,"saved":false}
