{"ts":1360840201927,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var app = require('http').createServer(handler);\nvar fs = require('fs');\nvar io = require('socket.io').listen(app);\nvar port = process.env.PORT || 5000;\napp.listen(port);\n\n// websockets not supported yet\nio.configure(function() {\n   io.set(\"transports\", [\"xhr-polling\"]);\n   io.set(\"polling duration\", 10);\n});\n\nfunction handler(req, res) {\n   fs.readFile(__dirname + '/index.html',\n\n   function(err, data) {\n      if (err) {\n         res.writeHead(500);\n         return res.end('Error loading index.html');\n      }\n\n      res.writeHead(200);\n      res.end(data);\n   });\n}\n\n\nfunction cell(_x, _y) {\n   this.x = _x;\n   this.y = _y;\n\n   this.energy = 0;\n   this.threshold = 100;\n   this.gotGrass = false;\n   this.spreadTo = false;\n\n   this.gotRabbit = false;\n   this.rabbitEnergy = 100;\n   this.rabbitThreshold = 200;\n   this.reproduce = false;\n   this.hop = false;\n\n   this.update = update;\n\n   function update() {\n      if (this.gotRabbit) {\n         if (this.rabbitEnergy > this.rabbitThreshold) {\n            this.rabbitEnergy /= 2;\n            this.reproduce = true;\n         }\n         else {\n            this.rabbitEnergy--;\n            if (this.energy <= 25) {\n               if ((Math.floor(Math.random() * 10) % 10) == 1) {\n                  this.rabbitEnergy -= 5;\n                  this.hop = true;\n               }\n            }\n            if (this.energy > 0) {\n               this.rabbitEnergy += 5;\n               this.energy -= 2;\n            }\n         }\n         if (this.rabbitEnergy <= 0) this.gotRabbit = false;\n      }\n\n      if (this.gotGrass) {\n         if (this.energy > this.threshold) {\n            //choose random cell\n            //add to cell\n            this.energy /= 2;\n            this.spreadTo = true;\n         }\n         else {\n            this.energy++;\n         }\n         if (this.energy <= 0) {\n            this.energy = 0;\n            this.gotGrass = false;\n         }\n      }\n   }\n}\n\nvar Forest = function() {\n   this.maxTrees = 1000;\n   this.growthRate = 1;\n   this.trees = 0;\n   this.updateForest = updateForest;\n   this.setLevel = setLevel;\n   this.level = 1;\n   this.wood = 0;\n   this.deathRate = 0.001;\n   this.maxWood = 500;\n\n   function setLevel(level) {\n      this.level = level;\n      this.growthRate *= level;\n      this.maxTrees *= level;\n\n      this.maxWood *= level;\n   }\n\n   function updateForest(dt) {\n      this.trees += (this.growthRate * dt);\n\n      if (this.trees > this.maxTrees) this.trees = this.maxTrees;\n\n      this.wood += this.trees * (this.deathRate * dt);\n      this.trees -= this.deathRate * dt;\n\n      if (this.wood > this.maxWood) this.wood = this.maxWood;\n      if (this.trees < 0) this.trees = 0;\n   }\n};\n\nvar Field = function(_id) {\n   this.timeCreated = new Date();\n   this.lastUpdated = 0;\n   this.dt = 0;\n   this.id = _id;\n   this.cells = {};\n   this.numCells = 10;\n   this.grass_amt = 0;\n   this.rabbit_amt = 0;\n   this.active = false;\n};\n\nField.prototype.spreadTo = function(x, y) {\n   var newX = ((Math.floor(Math.random() * 3)) - 1);\n   var newY = ((Math.floor(Math.random() * 3)) - 1);\n   //console.log(\"multiply \" + x + \" , \" + y);\n\n   if (x + newX >= this.numCells) return;\n   if (x + newX <= 0) return;\n\n   if (y + newY >= this.numCells) return;\n   if (y + newY <= 0) return;\n\n   this.cells[x + newX][y + newY].gotGrass = true;\n   this.cells[x + newX][y + newY].energy = 100;\n};\n\nField.prototype.hop = function(x, y) {\n   var newX = (Math.floor(Math.random() * 4)) - 2;\n   var newY = (Math.floor(Math.random() * 4)) - 2;\n   //console.log(\"hop \"+newX +\" \"  + newY + \" \"+x + \" \"+y);\n   if (x + newX >= this.numCells) return;\n   if (x + newX <= 0) return;\n\n   if (y + newY >= this.numCells) return;\n   if (y + newY <= 0) return;\n\n   this.cells[x][y].gotRabbit = false;\n   this.cells[x + newX][y + newY].gotRabbit = true;\n   this.cells[x + newX][y + newY].rabbitEnergy = this.cells[x][y].rabbitEnergy;\n   this.cells[x][y].rabbitEnergy = 0;\n};\n\nField.prototype.reproduce = function(x, y) {\n   var newX = ((Math.floor(Math.random() * 3)) - 1);\n   var newY = ((Math.floor(Math.random() * 3)) - 1);\n   //console.log(\"reproduce \" +newX +\" \"  + newY + \" \"+x + \" \"+y);\n   if (x + newX >= this.numCells) return;\n   if (x + newX <= 0) return;\n\n   if (y + newY >= this.numCells) return;\n   if (y + newY <= 0) return;\n\n   this.cells[x + newX][y + newY].gotRabbit = true;\n   this.cells[x + newX][y + newY].rabbitEnergy = 50;\n};\n\n\nField.prototype.init = function(_cells) {\n   // kind of dodgy way to get reference to the cells\n   this.cells = _cells;\n\n   //   this.cells[2][2].gotGrass = true;\n   //   this.cells[2][2].energy = 100;\n   //   this.cells[2][9].gotGrass = true;\n   //   this.cells[2][9].energy = 100;\n   //   this.cells[5][5].gotGrass = true;\n   //   this.cells[5][5].energy = 100;\n   //   this.cells[6][5].gotGrass = true;\n   //   this.cells[6][5].energy = 100;\n   //   this.cells[5][4].gotGrass = true;\n   //   this.cells[5][4].energy = 100;\n   //   this.cells[4][4].gotGrass = true;\n   //   this.cells[4][4].energy = 100;\n   //\n   //   this.cells[9][2].gotGrass = true;\n   //   this.cells[9][2].energy = 100;\n   //   this.cells[9][9].gotGrass = true;\n   //   this.cells[9][9].energy = 100;\n   //\n   //   this.cells[5][5].gotRabbit = true;\n   //   this.cells[2][2].gotRabbit = true;\n   //   this.cells[9][9].gotRabbit = true;\n   //   this.cells[5][5].gotRabbit = true;\n};\n\n\nField.prototype.update = function() {\n   this.dt = new Date().getTime() - this.lastUpdated;\n   this.lastUpdated = new Date().getTime();\n   this.rabbit_amt = 0;\n   this.grass_amt = 0;\n\n   for (var i = 0; i < this.numCells; i++) {\n      for (var j = 0; j < this.numCells; j++) {\n         this.cells[i][j].update();\n\n         if (this.cells[i][j].gotRabbit) this.rabbit_amt++;\n         if (this.cells[i][j].gotGrass) this.grass_amt++;\n\n         if (this.cells[i][j].spreadTo) {\n            this.spreadTo(i, j);\n            this.cells[i][j].spreadTo = false;\n         }\n         if (this.cells[i][j].hop) {\n            this.hop(i, j);\n            this.cells[i][j].hop = false;\n         }\n\n         if (this.cells[i][j].reproduce) {\n            this.reproduce(i, j);\n            this.cells[i][j].reproduce = false;\n         }\n         if (this.active) {\n            io.sockets.emit('updateCell', i, j, this.cells[i][j].gotRabbit, this.cells[i][j].gotGrass); {}\n         }\n         var x, y = 0;\n         if (this.grass_amt <= 5) {\n            x = ((Math.floor(Math.random() * 8)));\n            y = ((Math.floor(Math.random() * 8)));\n            this.cells[x][y].gotGrass = true;\n            this.cells[x][y].energy = 100;\n         }\n         if (this.rabbit_amt <= 0) {\n            x = ((Math.floor(Math.random() * 8)));\n            y = ((Math.floor(Math.random() * 8)));\n            this.cells[x][y].gotRabbit = true;\n            this.cells[x][y].rabbitEnergy = 100;\n         }\n      }\n   }\n};\n\n\nvar fields = {};\n\nfunction createCells() {\n   var cells = {};\n   var numCells = 10;\n   for (var i = 0; i < numCells; i++) {\n      var cellsRow = {};\n      for (var j = 0; j < numCells; j++) {\n         cellsRow[j] = new cell(i, j);\n      }\n      cells[i] = cellsRow;\n   }\n   return cells;\n}\n\nfor (var i = 0; i < 50; i++) {\n   var cells = createCells();\n   createCells(cells);\n   fields[i] = new Field(i);\n   fields[i].init(cells);\n}\n\nvar count = 0;\nsetInterval(function() {\n   fields[count].active=true;\n   for (var i = 0; i < 50; i++) {\n      fields[i].update();\n      \n   }\n   fields[count].active=false;\n}, 100);\n\nvar dt = new Date().getTime();\nvar lastUpdate = dt;\n\nsetInterval(sendTime, 1000);\n\n\n\nfunction sendTime() {\n   io.sockets.emit('updateTime', new Date());\n   dt = new Date().getTime() - lastUpdate;\n   lastUpdate = new Date().getTime();\n\n   io.sockets.emit('refresh', 1);\n   count++;\n   count %= 50;\n   io.sockets.emit('fieldData', fields[count].timeCreated, fields[count].id, fields[count].dt);\n}\n\n// usernames which are currently connected to the chat\nvar usernames = {};\nio.sockets.on('connection', function(socket) {\n   // when the client emits 'adduser', this listens and executes\n   socket.on('adduser', function(username) {\n\n      // we store the username in the socket session for this client\n      socket.username = username;\n\n      // add the client's username to the global list\n      usernames[username] = username;\n\n      // echo to client they've connected\n      socket.emit('updatechat', 'SERVER', 'you have connected');\n\n      // echo globally (all clients) that a person has connected\n      socket.broadcast.emit('updatechat', 'SERVER', username + ' has connected');\n\n      // update the list of users in chat, client-side\n      io.sockets.emit('updateusers', usernames);\n\n   });\n\n   // when the user disconnects.. perform this\n   socket.on('disconnect', function() {\n      // remove the username from global usernames list\n      delete usernames[socket.username];\n\n      // update list of users in chat, client-side\n      io.sockets.emit('updateusers', usernames);\n\n      // echo globally that this client has left\n      socket.broadcast.emit('updatechat', 'SERVER', socket.username + ' has disconnected');\n   });\n});"]],"start1":0,"start2":0,"length1":0,"length2":9099}]],"length":9099}
{"contributors":[],"silentsave":false,"ts":1361009365413,"patch":[[{"diffs":[[0,"  }\n};\n\n"],[-1,"\n"],[0,"var fiel"]],"start1":6842,"start2":6842,"length1":17,"length2":16}]],"length":9098,"saved":false}
{"contributors":[],"silentsave":false,"ts":1362889469753,"patch":[[{"diffs":[[0," ' has connected"],[1," "],[0,"');\n\n      // up"]],"start1":8527,"start2":8527,"length1":32,"length2":33}]],"length":9099,"saved":false}
